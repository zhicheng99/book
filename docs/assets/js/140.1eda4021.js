(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{437:function(t,a,i){"use strict";i.r(a);var n=i(10),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"《程序员数学-位运算》-如何使用二进制计算乘法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#《程序员数学-位运算》-如何使用二进制计算乘法"}},[t._v("#")]),t._v(" 《程序员数学：位运算》——如何使用二进制计算乘法？")]),t._v(" "),i("p",[t._v("作者：小傅哥\n博客：https://bugstack.cn\n源码：https://github.com/fuzhengwei/java-algorithms")]),t._v(" "),i("blockquote",[i("p",[t._v("沉淀、分享、成长，让自己和他人都能有所收获！")])]),t._v(" "),i("h1",{attrs:{id:"一、前言"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),i("p",[t._v("你是什么时候注意到位运算？")]),t._v(" "),i("p",[t._v("从毕业入职公司看大佬的代码出现 2 << 4 开始？从小白晋升高开读框架的源码看到 MAXIMUM_CAPACITY = 1 << 30; 开始？还是从什么时候开始？")]),t._v(" "),i("p",[t._v("其实二进制的位运算一直在我们那身边，从你开始编写 Hello Word 打印输出时就有二进制流的处理，只不过隐藏的很深不好发现。所以在我们开始意识到代码和二进制的关系往往都是来自于看到可以用二进制完成的计算，包括；二进制计算效率高于乘机，也包括二进制可以更好的体现出你要设置值的大小范围。比如你要设定一个指定范围大小的 Int 值 = 1073741824，那么是给这样一个整数值看起来直观，还是二进制 1<< 30 更直观呢？其实他们两个值是相等的。所以这样的情况下也会有二进制运算的体现。")]),t._v(" "),i("p",[t._v("而小傅哥在学习编程阶段，第一次注意到二进制的运算是关于a、b两个值的互换，如果不引入第三个值就可以完成？")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("int a = 2, b = 3;\na = a ^ b;\nb = a ^ b;\na = a ^ b;\n")])])]),i("p",[t._v("一个 ^ 帽子一样的运算符，就把两个数给替换，替换后 a = 3，b = 2 那它是怎么办到的呢？")]),t._v(" "),i("p",[i("strong",[t._v("^ 异或运算")]),t._v("：两个操作数的同位中，如果值相同（都是 0 或者都是 1）则为 0，不同（一个是 0，一个是 1）则为 1")]),t._v(" "),i("ul",[i("li",[t._v("以二进制数据为基础进行运算解析 a = 2 二进制数为 0010、b = 3 二进制数为 0011a = a ^ b = 0010 ^ 0011 = 0001b = a ^ b = 0001 ^ 0011 = 0010 = 2a = a ^ b = 0001 ^ 0010 = 0011 = 3")]),t._v(" "),i("li",[t._v("异或运算的基本定理解析 a = a ^ bb = a ^ b = a ^ b ^ b = a = 2a = a ^ b = a ^ a ^ b = b = 3")])]),t._v(" "),i("p",[t._v("而二进制的运算魅力还远不至于此，还可以完成奇偶判断、有效位计算、乘法、加法等。这些内容的学习可以让我们研发人员，积累编程逻辑和拓展思维模式。接下来小傅哥就带着大家学习一下。")]),t._v(" "),i("h1",{attrs:{id:"二、位操作介绍"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#二、位操作介绍"}},[t._v("#")]),t._v(" 二、位操作介绍")]),t._v(" "),i("p",[t._v("位操作是程序设计中对位数组或二进制数的一元和二元操作。在许多古老的微处理器上，位运算比加减运算略快，通常位运算比乘除法运算要快很多。在现代架构中，位运算的运算速度通常与加法运算相同（仍然快于乘法运算），但是通常功耗较小，因为资源使用减少。")]),t._v(" "),i("p",[t._v("四种基本的位运算包括；与&、或|、非~、异或^")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/c39265d995de4c018614e3bab61a6430~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=DNOKfsAH5bUrX7CvNq4YT3MARYs%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("int a = 1; // 0001\nint b = 2; // 0010\nint c = 4; // 0100\nint d = 8; // 1000\nint e = 15;// 1111\n\n// 与运算；0001\nSystem.out.println(Integer.toBinaryString(a & e)); // 0001\n// 或运算；0011\nSystem.out.println(Integer.toBinaryString(a | b)); // 0011\n// 非运算；0101\nSystem.out.println(Integer.toBinaryString(a ^ c)); // 0101\n// 异或运算；...11110111\nSystem.out.println(Integer.toBinaryString(~d));\n")])])]),i("ul",[i("li",[t._v("与运算；两个数都转为二进制，然后从高位开始比较，如果两个数都为1则为1，否则为0。")]),t._v(" "),i("li",[t._v("或运算；两个数都转为二进制，然后从高位开始比较，两个数只要有一个为1则为1，否则就为0。")]),t._v(" "),i("li",[t._v("非运算；两个数转为二进制，然后从高位开始比较，如果相同则为0，不相同则为1。")]),t._v(" "),i("li",[t._v("异或运算；如果位为0，结果是1，如果位为1，结果是0")])]),t._v(" "),i("h1",{attrs:{id:"三、位运算案例"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#三、位运算案例"}},[t._v("#")]),t._v(" 三、位运算案例")]),t._v(" "),i("h1",{attrs:{id:"_1-获取位值"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-获取位值"}},[t._v("#")]),t._v(" 1. 获取位值")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/d97029cc78b149989b7d2bd2f576217f~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=Yo%2By5738GzZekAQ4WhCWA99fX00%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public int getBit(int number, int bitPosition) {\n    return (number >> bitPosition) & 1;\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：获取二进制数字中，指定位置的值。")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：该方法将目标值右移到最右边，即位数组的第0个位置上，如；0001 的二进制形式。之后与 1 进行与操作。如果目标位是1，那么结果就是1，反之结果是0；")])]),t._v(" "),i("h1",{attrs:{id:"_2-设置位值"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置位值"}},[t._v("#")]),t._v(" 2. 设置位值")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/3afc7cae71d949e5a9164e26b0d1ddd3~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=NEbeeTPvigZ%2FZI56RFONqMPqjck%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public int setBit(int number, int bitPosition) {\n    return number | (1 << bitPosition);\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：设置二进制数字中，指定位置的值")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：1 就像一个子弹，左移指定位数到目标位置，如；0010 的二进制形式。与目标值 number 做或运算(把子弹打进去)，设置结果并返回。")])]),t._v(" "),i("h1",{attrs:{id:"_3-清空位值"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-清空位值"}},[t._v("#")]),t._v(" 3. 清空位值")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/00f200768d5a41df8c23ce816a7e173b~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=DgoLFUkKCqJ3uLU4PQ%2FYZHB2KPs%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public int clearBit(int number, int bitPosition) {\n    int mask = ~(1 << bitPosition);\n    return number & mask;\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：清空二进制数字中，指定位置的值")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：类似于设置位值，把1左移指定位数后取反，从 0010 得到 1101 并与目标值 number 做与&运算，清掉目标位的值。")])]),t._v(" "),i("h1",{attrs:{id:"_4-更新位值"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_4-更新位值"}},[t._v("#")]),t._v(" 4. 更新位值")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/712d1cc69cfb4bfd9c4e255312a32faa~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=EJi4gftBL4%2BKUFJP5i3RAH6bYGg%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public int updateBit(int number, int bitPosition, int bitValue) {\n    int clearMask = ~(1 << bitPosition);\n    return (number & clearMask) | (bitValue << bitPosition);\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：清空二进制数字中，指定位置的值")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：结合清空clearBit、设置setBit，两个方法将制定位置替换为设置值。")])]),t._v(" "),i("h1",{attrs:{id:"_5-偶数判断"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_5-偶数判断"}},[t._v("#")]),t._v(" 5. 偶数判断")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/d7677e14c2904fe9b983c7e31169cac6~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=Ey3oraRQjULiZzioegRvAmISfCs%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public boolean isEven(int number) {\n    return (number & 1) == 0;\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：检测 number 是否为偶数")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：检测二进制的最右侧一位，如果是1，那么一定是奇数。所以可以与1做与&运算的结果和0判断。不等于0是奇数，等于0是偶数。")])]),t._v(" "),i("h1",{attrs:{id:"_6-正数判断"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_6-正数判断"}},[t._v("#")]),t._v(" 6. 正数判断")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/9d202db8c412476dbdd5a4b54575c2b5~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=r5pwcufNYyF%2BmO4xcCq46vuHvW4%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public boolean isPositive(int number) {\n    if (number == 0) {\n        return false;\n    }\n    return ((number >> 31) & 1) == 0;\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：判断 number 值是否为正数。")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：基于二进制正数最左边的值是0的这个事实，右移31位，和1做与&运算，如果结果等于1为负数，反正为正数。")])]),t._v(" "),i("h1",{attrs:{id:"_7-左移乘二"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_7-左移乘二"}},[t._v("#")]),t._v(" 7. 左移乘二")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/6534e2ec4dd0402a93b3ea2617465ea8~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=mC0X4XK%2BGJG%2Ft1PvOG7u9ynjjwc%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public int multiplyByTwo(int number) {\n    return number << 1;\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：乘以2")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：该方法将原始数字向左移动一位。因此所有位都将乘以2，因此数字本身也将乘以2。")])]),t._v(" "),i("h1",{attrs:{id:"_8-右移除二"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_8-右移除二"}},[t._v("#")]),t._v(" 8. 右移除二")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p26-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/56756e4127ae4146bc68f1911c836199~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=OGIDFUH7rjxJXQzss1o11ztxPwA%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public int divideByTwo(int number) {\n    return number >> 1;\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：除以2")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：该方法将原始数字向右移动一位。因此所有位都将除以2，因此数字本身也将除以2,且不会产生余数。")])]),t._v(" "),i("h1",{attrs:{id:"_9-正负交换"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_9-正负交换"}},[t._v("#")]),t._v(" 9. 正负交换")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/8a0149a01fbf45e2b3f79bed483d3529~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=XZYNjwLHaX7eGPvjxnODH1fXVQo%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public int switchSign(int number) {\n    return ~number + 1;\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：正数转负数，负数转正数")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：通过二进制异或运算取反，如 1000 = 8 取反 1.....0111 = -9 + 1 = -8")])]),t._v(" "),i("h1",{attrs:{id:"_10-乘法运算-有符号"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_10-乘法运算-有符号"}},[t._v("#")]),t._v(" 10. 乘法运算(有符号)")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/1b0efc5ee3bd487f86c39623ae45e831~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=WvlmkGxpdcLiH5CbdZfCW36p9xQ%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v('public int multiply(int a, int b) {\n    int multiply = 0;\n    while (a != 0 && b != 0) {\n        System.out.print("计算步骤(" + (isEven(b) ? "偶数" : "奇数") + ")：a(" + String.format("%04d", Integer.valueOf(Integer.toBinaryString(a))) + ") = " + a + " | b(" + String.format("%04d", Integer.valueOf(Integer.toBinaryString(b))) + ") = " + b);\n        // b 是偶数：2a * (b/2)\n        if (isEven(b)) {\n            a = multiplyByTwo(a);\n            b = divideByTwo(b);\n        }\n        // b 奇数\n        else {\n            // b 正数：2a * (b - 1)/2 + a\n            if (isPositive(b)) {\n                multiply += a;\n                a = multiplyByTwo(a);\n                b = divideByTwo(b - 1);\n            }\n            // b 负数：2a * (b + 1)/2 - a\n            else {\n                multiply -= a;\n                a = multiplyByTwo(a);\n                b = divideByTwo(b + 1);\n            }\n        }\n        System.out.println(" | multiply(" + String.format("%04d", Integer.valueOf(Integer.toBinaryString(multiply))) + ") = " + multiply);\n    }\n    return multiply;\n}\n')])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：计算有符号二进制乘积")]),t._v(" "),i("li",[i("strong",[t._v("公式")]),t._v("：推到公式与代码向对应 = a * b= 2a * (b/2) —— b为偶数= 2a * (b - 1)/2 + a —— b 为奇数、正数= 2a * (b + 1)/2 - a —— b 为奇数、负数")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：乘数a不断左移、乘数b不断右移。当b归0时，a左移累计下来的值就是乘积总和。如图")])]),t._v(" "),i("h1",{attrs:{id:"_11-乘法运算-无符号"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_11-乘法运算-无符号"}},[t._v("#")]),t._v(" 11. 乘法运算(无符号)")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/b84db25a3786494e87e46e704934b803~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=FpVNxd9LXIW2IelHPPxHQyZJizU%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v('public int multiplyUnsigned(int number1, int number2) {\n    int result = 0;\n    int multiplier = number2;\n    int bitIdx = 0;\n    while (multiplier != 0) {\n        if ((multiplier & 1) == 1) {\n            System.out.println(number1 + " << " + bitIdx + " = " + (number1 << bitIdx));\n            result += number1 << bitIdx;\n        }\n        bitIdx += 1;\n        multiplier = multiplier >> 1;\n    }\n    return result;\n}\n')])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：计算无符号二进制乘积")]),t._v(" "),i("li",[i("strong",[t._v("公式")]),t._v("： 13 = 2^3 + 2^2 + 2^0x"),i("em",[t._v("13 = x")]),t._v("2^3 + x"),i("em",[t._v("2^2 + x")]),t._v("2^0x"),i("em",[t._v("13 = x<<3 + x<<2 + x<<02")]),t._v("13 = 2<<3 + 2<<2 + 2<<0 = 16 + 8 + 2 = 26")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：每个数字都可以表示成一系列2的幂之和。例如 13 的二进制是 1101，最右侧第1位1，是2的0次幂，所以对应2的进制值是左移0位。再比如13的右数第3位是1，对应位置值是4也就是2的2次幂，所以对应2的进制值是左移2位。最终把这些值相加就是乘积值。")])]),t._v(" "),i("h1",{attrs:{id:"_12-一的数量"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_12-一的数量"}},[t._v("#")]),t._v(" 12. 一的数量")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/5cea69e8dcd54b8c95d4c35d145c770a~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=K0CMMGvBMRCflE2%2FDejzNhOgJQc%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public int countSetBits(int originalNumber) {\n    int setBitsCount = 0;\n    int number = originalNumber;\n    while (number != 0) {\n        setBitsCount += number & 1;\n        number >>>= 1;\n    }\n    return setBitsCount;\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：使用位运算符对一个数字里设置为1的位进行记数")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：把数字每次向右移动1位，然后使用&操作符取出最右边一位的值，1则记数加1，0则不计。")])]),t._v(" "),i("h1",{attrs:{id:"_13-转换计算"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_13-转换计算"}},[t._v("#")]),t._v(" 13. 转换计算")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/5d41fd15ed8940dc872c8835ea6a830b~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=rN2dYTmzPWR%2FpxG1PaSE6V%2BviTU%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public int bitsDiff(int number1, int number2) {\n    return countSetBits(number1 ^ number2);\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：计算一个数字，转换为另外一个数字，所需要的转换位数。")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：当数字进行XOR异或运算时，结果将是不同位数的数量(即异或的结果中所有被设置为1的位的数量)。")])]),t._v(" "),i("h1",{attrs:{id:"_14-有效位数"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_14-有效位数"}},[t._v("#")]),t._v(" 14. 有效位数")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/8af8d09872284c03817c53cb2bafeabc~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=qKBOjoWYUy2rQmhALeWPe8tNCKM%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public int bitLength(int number) {\n    int bitsCounter = 0;\n    while ((1 << bitsCounter) <= number) {\n        bitsCounter += 1;\n    }\n    return bitsCounter;\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：计算二进制数值的有效位数，例如 14 = 1110 有效位为4位。")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：通过1不断地左移加和与 number 做对比，只要比number小就累加1位。")])]),t._v(" "),i("h1",{attrs:{id:"_15-幂值判断"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_15-幂值判断"}},[t._v("#")]),t._v(" 15. 幂值判断")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/2e0ceb393c9d4d4c95101c29f8251662~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=eCw%2BovZ%2Fet8dvfWvqWcJmu6cmlc%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("public boolean isPowerOfTwo(int number) {\n    return (number & (number - 1)) == 0;\n}\n")])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：检查number是否为2的幂值。")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：2的幂值形式的数字为2、4、8、16 等，那么可以把一个二进制数进行错位与&运算，如果错位比对都为0，那么就是2的幂数。")])]),t._v(" "),i("h1",{attrs:{id:"_16-加法运算-ripple-carry-adder"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_16-加法运算-ripple-carry-adder"}},[t._v("#")]),t._v(" 16. 加法运算(Ripple-carry adder)")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/51d71504baa048f198fe3ff7314a704f~noop.image?_iz=58558&from=article.pc_detail&x-expires=1687572958&x-signature=x8Juj6uhXCIgWB5ovDwk8HJRl0o%3D",alt:""}})]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v('public int fullAdder(int a, int b) {\n    int result = 0;\n    // 计算每次的进位值，1 + 1 = 0010 进位为1。是一种&运算。\n    int carryOut = 0;\n    System.out.println("| aBit | bBit | carryIn | aiPlusBi | bitSum | carryOut | result |");\n    for (int i = 0; i < 32; i++) {\n        int aBit = getBit(a, i);\n        int bBit = getBit(b, i);\n        int carryIn = carryOut;\n        System.out.print("|   " + aBit + "  |  " + bBit + "   |       " + carryIn);\n        // 加和 - 两个值；如果相同则为0，不相同则为1\n        int aiPlusBi = aBit ^ bBit;\n        System.out.print(" |        " + aiPlusBi);\n  \n        // 加和 - 进位；\n        int bitSum = aiPlusBi ^ carryIn;\n        System.out.print(" |      " + bitSum);\n  \n        // 进位；同位置 ai & bi = 1 | 与进位 aiPlusBi & carryIn = 1\n        carryOut = (aBit & bBit) | (aiPlusBi & carryIn);\n        System.out.print(" |  " + carryOut + "(" + Integer.toBinaryString(carryOut) + ")   ");\n  \n        // 累加；把当前位置计算的值，左移n位\n        result = result | (bitSum << i);\n        System.out.println(" | " + result + "(" + String.format("%04d", Integer.valueOf(Integer.toBinaryString(result))) + ")|");\n    }\n    return result;\n}\n')])])]),i("ul",[i("li",[i("strong",[t._v("目的")]),t._v("：计算有符号二进制加法")]),t._v(" "),i("li",[i("strong",[t._v("逻辑")]),t._v("：二进制的累加可以对照下计算10进制累加时一样，对应2个数字相加，当有进位的时候记录进位。 首先二进制的加和计算，1+1 = 10、1+0=01、0+1=01、0+0=00，那么正好对应上 ^ 非运算，相同则为0，不相同则为1，因为即使两个1相加，当前位的值也是0。之后是进位相加，两数想加后，还可能有进位上来的数值与两数进行相加。结果相加完成后，计算进位，并保留进位用于下次计算。进位的计算为；ai & bi = 1 | 与进位 aiPlusBi & carryIn = 1，无论是两数相加，还是两数的和 aiPlusBi 与进位相加，只要与运算是1，那么就要保留进位。最后是累加结果，把对应位置的结果计算，按照当前计算到到二进制的位数左移到目标为止，累加到 result，最后就是结果值。")])]),t._v(" "),i("h1",{attrs:{id:"四、常见面试题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#四、常见面试题"}},[t._v("#")]),t._v(" 四、常见面试题")]),t._v(" "),i("ul",[i("li",[t._v("& 和 ~ 是什么运算？")]),t._v(" "),i("li",[t._v("两数交换不引入第三个变量如何处理？")]),t._v(" "),i("li",[t._v("二进制中1个个数怎么计算？")]),t._v(" "),i("li",[t._v("实现一个两数加和？")]),t._v(" "),i("li",[t._v("实现一个无符号两数成绩？")])]),t._v(" "),i("p",[t._v("文章来源：https://www.toutiao.com/article/7160839571394118148/?log_from=7bf16ade78328_1686968158249")]),t._v(" "),i("backTop")],1)}),[],!1,null,null,null);a.default=e.exports}}]);