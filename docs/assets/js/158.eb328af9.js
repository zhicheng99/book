(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{424:function(t,n,e){"use strict";e.r(n);var o=e(10),i=Object(o.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"仿有道云笔记网页剪报效果-抽取网页主内容区的算法原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#仿有道云笔记网页剪报效果-抽取网页主内容区的算法原理"}},[t._v("#")]),t._v(" 仿有道云笔记网页剪报效果 抽取网页主内容区的算法原理")]),t._v(" "),e("h2",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),e("p",[t._v("为所有 dom （body.childNodes）节点评分，分数最高的即为主内容节点\n影响某一个节点评分的因素主要有以下几项")]),t._v(" "),e("ol",[e("li",[t._v("文本节点"),e("code",[t._v("内容不为空")]),t._v(" 的数量及内容里的标点符号的数量")]),t._v(" "),e("li",[t._v("文本节点内容的长度")]),t._v(" "),e("li",[t._v("图片或 svg 的数量")]),t._v(" "),e("li",[t._v("图片或 svg 的大小")]),t._v(" "),e("li",[t._v("标签的 class 或 id 使用了内容区常用的一些字符串（如 content article 等） 这些是需要加分的")]),t._v(" "),e("li",[t._v("标签的 class 或 id 使用了非内容区常用的一些字符串 （如 head foot 等）这些是需要减分的")]),t._v(" "),e("li",[t._v("标签的位置 （比如距页面顶部都超过一屏了）这样基本就可能排除这样的节点了")])]),t._v(" "),e("h3",{attrs:{id:"实现过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现过程"}},[t._v("#")]),t._v(" 实现过程")]),t._v(" "),e("h4",{attrs:{id:"第一步-取得所有节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一步-取得所有节点"}},[t._v("#")]),t._v(" 第一步：取得所有节点")]),t._v(" "),e("p",[t._v("取得页面的所有 dom 节点（用递归把所有的子节点 "),e("code",[t._v("childNodes")]),t._v(" 都列出来），过滤掉不需要参与评分的节点（也就是这些节点不太可能做为主内容的容器，当然也不排除极端情况，但我们只处理绝大多数）\n需要过滤掉的节点有 link img i a svg style script select input textarea\n还有 nodeType = 3 的内容为空的文本节点，nodeType==8 的注释节点")]),t._v(" "),e("blockquote",[e("p",[t._v("循环取得节点的同时 要统计各个评分因素的数量")])]),t._v(" "),e("h4",{attrs:{id:"第二步-转化为评分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二步-转化为评分"}},[t._v("#")]),t._v(" 第二步：转化为评分")]),t._v(" "),e("p",[t._v("对第一步统计出来的评分因素的量转化为具体分数")]),t._v(" "),e("h4",{attrs:{id:"第三步-排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三步-排序"}},[t._v("#")]),t._v(" 第三步：排序")]),t._v(" "),e("p",[t._v("根据评分对节点进行一次降序排序，那么取出来的第一个就是所要找的主内容节点")]),t._v(" "),e("h4",{attrs:{id:"注意"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意：")]),t._v(" "),e("p",[t._v("如果要涵盖所有的网页，这个是不太可能的，对一些写得比较规范（页面结构清晰，class 和 id 名称运用也比较准确），内容所占的篇幅比较大的网页，那么选中主内容区的成功率是比较高的；反之，成功率就没那么高了；尤其是一些网页，可能是自动生成的，class 或 id 都是一些随机数，可能还存在大篇幅的广告区，成功率会更低。")]),t._v(" "),e("p",[t._v("总之，这种算法是个不断优化的过程。")]),t._v(" "),e("h4",{attrs:{id:"附类文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#附类文件"}},[t._v("#")]),t._v(" 附类文件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\n\nfunction Collect(){\n\n\tthis.allNode = [];\n\tthis.baseScore = 10;\n\n\t//不太可能做为主内容标签的 不参与评分\n\tthis.notContentTagObj = {\n\t\t"p":1,\n\t\t"a":1,\n\t\t"i":1,\n\t\t"span":1,\n\t\t"form":1,\n\t\t"li":1,\n\t\t"ul":1,\n\t\t"ol":1,\n\t\t"input":1,\n\t\t"select":1,\n\t\t"textarea":1,\n\t\t"code":1,\n\t\t"pre":1,\n\t\t"button":1,\n\t\t"img":1,\n\t\t"h1":1,\n\t\t"h2":1,\n\t\t"h3":1,\n\t\t"h4":1,\n\t\t"h5":1,\n\t\t"h6":1,\n\t\t"meta":1,\n\t\t"link":1,\n\t\t"script":1,\n\t\t"figure":1,\n\t\t"svg":1,\n\t\t"path":1,\n\t\t"blockquote":1,\n\t\t"table":1,\n\t\t"thead":1,\n\t\t"tbody":1,\n\t\t"th":1,\n\t\t"tr":1,\n\t\t"td":1,\n\t\t"widget":1,\n\t\t"iframe":1\n\t};\n\n\tthis.notConClassOrId = new RegExp(/(head|foot|side|comment|recommend|tag|widget)/ig);\n\tthis.isConClassOrId = new RegExp(/(content|article)/ig);\n\n\tthis.punctuationReg = new RegExp(/(\\.|,|;|\'|“|:|。|，|、|；|’|"|：\\(|\\))/g);\n\n\n\n\n\t//宽度小于200 不参与评分\n\tthis.MinRangeW = 200; \n\n\t//高度小于50 不参与评分\n\tthis.MinRangeH = 50;\n\n}\nCollect.prototype.getPoint = function(obj) {\n    var t = obj.offsetTop; //获取该元素对应父容器的上边距\n    var l = obj.offsetLeft; //对应父容器的上边距\n    //判断是否有父容器，如果存在则累加其边距\n    while (obj = obj.offsetParent) {//等效 obj = obj.offsetParent;while (obj != undefined)\n\n    \t\tt += obj.offsetTop; //叠加父容器的上边距\n\t        l += obj.offsetLeft; //叠加父容器的左边距\n   \n    }\n \n    return {\n    \ttop:t,\n    \tleft:l\n    }\n};\nCollect.prototype.getAllNode = function(dom) {\n\tvar _this = this;\n\tvar tmp = [];\n\tvar innerF = function(dom){\n\t\tlet child = dom.children;\n\t\t// let child = dom.childNodes;\n\n\n\t\tif(child && (child.length>0)){\n\n\t\t\tlet cLen = child.length;\n\t\t\tfor (let i = 0; i < cLen; i++) {\n\n\t\t\t\t \n\n\n\t\t\t\t// console.log(child[i].tagName.toLowerCase());\n\t\t\t\t// console.log(!_this.notContentTagReg.test(child[i].tagName.toLowerCase()));\n\n\t\t\t\tif(\n\t\t\t\t\t(!_this.notContentTagObj[child[i].tagName.toLowerCase()])\n\t\t\t\t\t// !(_this.notContentTagReg.test(child[i].tagName.toLowerCase())) \n\t\t\t\t\t&& (child[i].clientWidth > _this.MinRangeW)\n\t\t\t\t\t&& (child[i].clientHeight > _this.MinRangeH)\n\n\n\t\t\t\t\t){\n\n\t\t\t\t\t// console.log(child[i].clientWidth);\n\t\t\t\t\tchild[i].score = _this.baseScore;\n\t\t\t\t\tvar pos = _this.getPoint(child[i]);\n\t\t\t\t\tif(pos){\n\t\t\t\t\t\tchild[i].domPosTop = pos.top;\n\t\t\t\t\t\tchild[i].domPosLeft = pos.left;\n\t\t\t\t\t}\n\t\t\t\t\t_this.allNode.push(child[i]);\n\t\t\t\t}\n\n\t\t\t\t\t_this.getAllNode.call(_this,child[i]);\n\t\t\t}\n\t\t}else{\n\t\t\tconsole.log(\'循环完毕\');\n\t\t}\n\t}\n\n\tinnerF(dom);\n\n\n};\nCollect.prototype.filterNode = function() {\n\n\tvar _this = this;\n\tvar tmp = [];\n\tthis.allNode.filter(item=>{\n\t\tconsole.log(item.tagName.toLowerCase());\n\t\tconsole.log(!_this.notContentTagReg.test(item.tagName.toLowerCase()));\n\n\t\t// if(!_this.notContentTagReg.test(item.tagName.toLowerCase())){\n\t\tif(\n\n\t\t\t(item.tagName.toLowerCase() !=\'input\')\n\n\t\t\t){\n\t\t\ttmp.push(item);\n\n\t\t}\n\n\t\t// console.log(item.tagName.toLowerCase());\n\t\t// console.log(!_this.notContentTagReg.test(item.tagName.toLowerCase()));\n\n\n\t\t// return !_this.notContentTagReg.test(item.tagName.toLowerCase());\n\n\t})\n\n\tconsole.log(tmp);\n\n\t// this.allNode = tmp;\n\n};\nCollect.prototype.setBasicScore = function() {\n\tfor (var i = 0; i < this.allNode.length; i++) {\n\t\tthis.allNode[i].score = 10;\n\t}\n};\nCollect.prototype.isString = function(s) {\n\tif(Object.prototype.toString.call(s)==\'[object String]\'){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n};\nCollect.prototype.updateScoreByTagName_Class_Id = function() {\n\n\tfor (var i = 0; i < this.allNode.length; i++) {\n\t\tif(\n\t\t\tthis.isString(this.allNode[i].id) ||\n\t\t\tthis.isString(this.allNode[i].className)\n\n\t\t\t){\n\n\t\t\tif(\n\t\t\t\tthis.notConClassOrId.test(this.allNode[i].id.toLowerCase()) ||\n\t\t\t\tthis.notConClassOrId.test(this.allNode[i].className.toLowerCase()) \n\n\n\t\t\t\t)\n\t\t\t{\n\n\t\t\t\tthis.allNode[i].score--;\n\n\t\t\t}\n\n\t\t\tif(\n\t\t\t\tthis.isConClassOrId.test(this.allNode[i].id.toLowerCase()) ||\n\t\t\t\tthis.isConClassOrId.test(this.allNode[i].className.toLowerCase()) \n\n\t\t\t\t)\n\t\t\t{\n\n\t\t\t\tthis.allNode[i].score++;\n\n\t\t\t}\n\n\n\t\t}\n\t}\n\n\tthis.updateAllNode();\n\n\n};\nCollect.prototype.updateScoreByPunctuation = function() {\n\n\tvar _this = this;\n\n\tvar setParentScore = function(dom,score){\n\n\t\tif(typeof dom.score !=\'undefined\'){\n\t\t\tdom.score +=score;\n\t\t}else{\n\n\t\t\tsetParentScore(dom.parentElement,score);\n\n\t\t}\n\n\t}\n\n\tvar innerF = function(dom){\n\n\t\tvar child = dom.children;\n\t\tvar len = child.length;\n\t\tvar score = 0;\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tif(typeof child[i].score == \'undefined\'){\n\n\t\t\t\tif(child[i].innerText){\n\t\t\t\t\tvar tmp = child[i].innerText.match(_this.punctuationReg);\n\n\t\t\t\t\tif(tmp!==null && (tmp.length >0)){\n\t\t\t\t\t\tscore+= tmp.length;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\tsetParentScore(dom,score); //累积分数加到父级上  父级必须是有score属性的 也就是必须是在this.allNode里的\n\t\t// dom.score +=score;\n\n\t\tchild.children && innerF(child.children);\n\n\t}\n\n\t//一直找到每个节点的没有评分的子项为止\n\t//没有评分的节点计算内容里的标点符号数量  累计的分数给到它的父级\n\tfor (var i = 0; i < this.allNode.length; i++) {\n\n\t\tinnerF(this.allNode[i]);\n\n\t}\n};\n\nCollect.prototype.updateScoreByImgOrSvg = function() {\n\n\tvar _this = this;\n\n\tvar setParentScore = function(dom,score){\n\n\t\tif(typeof dom.score !=\'undefined\'){\n\t\t\tdom.score +=score;\n\t\t}else{\n\n\t\t\tsetParentScore(dom.parentElement,score);\n\n\t\t}\n\n\t}\n\n\tvar innerF = function(dom){\n\n\t\tvar child = dom.children;\n\t\tvar len = child.length;\n\t\tvar imgNum = 0;\n\t\tvar score = 0;\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tif(typeof child[i].score == \'undefined\'){\n\n\t\t\t\tif(\n\t\t\t\t\t (child[i].tagName.toLowerCase()== \'img\') \n\t\t\t\t\t || (child[i].tagName.toLowerCase()== \'svg\') \n\n\t\t\t\t\t){\n\t\t\t\t\t if(child[i].offsetWidth > 200){\n\t\t\t\t\t \timgNum++;\n\t\t\t\t\t }\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\tif(imgNum>2){\n\t\t\tscore +=imgNum*6;\n\t\t}else if(imgNum>4){\n\t\t\tscore +=imgNum*8;\n\t\t}else{\n\t\t\tscore +=imgNum;\n\t\t}\n\n\n\n\t\tsetParentScore(dom,score); //累积分数加到父级上  父级必须是有score属性的 也就是必须是在this.allNode里的\n\t\t// dom.score +=score;\n\n\t\tchild.children && innerF(child.children);\n\n\t}\n\t//计算子项的图片数量 \n\tfor (var i = 0; i < this.allNode.length; i++) {\n\n\t\tinnerF(this.allNode[i]);\n\n\t}\n\n};\nCollect.prototype.updateScoreByCodeTag = function() {\n\n\tvar _this = this;\n\n\tvar setParentScore = function(dom,score){\n\n\t\tif(typeof dom.score !=\'undefined\'){\n\t\t\tdom.score +=score;\n\t\t}else{\n\n\t\t\tsetParentScore(dom.parentElement,score);\n\n\t\t}\n\n\t}\n\n\tvar innerF = function(dom){\n\n\t\tvar child = dom.children;\n\t\tvar len = child.length;\n\t\tvar score = 0;\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tif(typeof child[i].score == \'undefined\'){\n\n\t\t\t\tif(\n\t\t\t\t\t (child[i].tagName.toLowerCase()== \'pre\') \n\t\t\t\t\t || (child[i].tagName.toLowerCase()== \'code\') \n\n\t\t\t\t\t){\n\t\t\t\t\t \tscore+=5;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t  \n\n\t\tsetParentScore(dom,score); //累积分数加到父级上  父级必须是有score属性的 也就是必须是在this.allNode里的\n\t\t// dom.score +=score;\n\n\t\tchild.children && innerF(child.children);\n\n\t}\n\t//计算子项的图片数量 \n\tfor (var i = 0; i < this.allNode.length; i++) {\n\n\t\tinnerF(this.allNode[i]);\n\n\t}\n\n\n};\nCollect.prototype.updateByDomPosTop = function() {\n\n\t//根据距body的距离进行减分 数值越大 减得越多 以50为单位\n\t//\n\tfor (var i = 0; i < this.allNode.length; i++) {\n\t\tif(this.allNode[i].domPosTop){\n\t\t\tthis.allNode[i].score -=(this.allNode[i].domPosTop/50);\n\t\t}\n\n\t}\n\n};\nCollect.prototype.updateAllNode = function() {\n\n\t//小于基础分的直接过滤掉\n\tthis.allNode = this.allNode.filter(item=>{\n\t\treturn item.score>=10;\n\t})\n\n\n};\nCollect.prototype.sort = function(list_data,item) {\n\tvar by = function(name,minor)\n        {\n            return function(o, p)\n            {\n            var a, b;\n            if (typeof o === "object" && typeof p === "object" && o && p) \n            {\n            a = o[name];\n            b = p[name];\n            if (a === b) {return typeof minor===\'function\' ?minor(o,p):0;}\n            if (typeof a === typeof b) { return a < b ? 1 : -1;}\n            return typeof a < typeof b ? -1 : 1;\n            }\n            else {throw ("error"); }\n            }\n        }\n    list_data.sort(by(item)); \n};\n\n\nCollect.prototype.getCoreContentArea = function() {\n\n\tvar body = document.body;\n\tthis.getAllNode(body);\n\t// this.filterNode();\n\n\t// this.setBasicScore();\n\n\tthis.updateScoreByTagName_Class_Id(); \n\tthis.updateScoreByPunctuation();\n\tthis.updateScoreByImgOrSvg();\n\tthis.updateScoreByCodeTag();\n\n\tthis.updateByDomPosTop();\n\n\n\n\tthis.sort(this.allNode,\'score\'); \n\n\tconsole.log(this.allNode);\n\n\n\n\tfor (var i = 0; i < this.allNode.length; i++) {\n\n\t\tthis.allNode[i].setAttribute(\'score\',this.allNode[i].score);\n\t}\n};\nvar co = null;\nfunction a(){\n\tco = new Collect();\n\tco.getCoreContentArea();\n\n\t$(co.allNode[0]).css({\'border\':\'dashed red 3px\'});\n\tconsole.log(html2canvas);\n\t // html2canvas(co.allNode[0], {\n  //       onrendered: function(canvas) {\n  //           document.body.appendChild(canvas);\n  //       },\n  //     width: 300,\n  //     height: 300\n  //   });\n\n //  html2canvas(co.allNode[0]).then(function(canvas) {\n\t//     document.body.appendChild(canvas);\n\t// });\n\nchrome.runtime.sendMessage({type:\'init\',html: co.allNode[0].innerHTML}, function(response) {\n\t    console.log(\'收到来自pop的回复：\' +response);\n\t  \n\t});\n\n}\n\n\n//选择不准确，舍弃该节点选择下一个\nfunction b(){\n\n\tconsole.log(co);\n\n\tif(co === null){\n\t\treturn false;\n\t}\n\n\t$(co.allNode[0]).css({\'border\':\'dashed red 0\'});\n\n\tco.allNode = co.allNode.splice(1);\n\t$(co.allNode[0]).css({\'border\':\'dashed red 3px\'});\n\n\n\tchrome.runtime.sendMessage({type:\'next\',html: co.allNode[0].innerHTML}, function(response) {\n\t    console.log(\'收到来自pop的回复：\' +response);\n\t  \n\t});\n\n}\n\nfunction c(){\n\n\tif(co === null){\n\t\treturn false;\n\t}\n\n\tvar origin = \'<br>文章来源：\'+location.href;\n \n\tchrome.runtime.sendMessage({type:\'success\',html: co.allNode[0].innerHTML+origin}, function(response) {\n\t    console.log(\'收到来自pop的回复：\' +response);\n\t  \n\t});\n}\n\nfunction clear(){\n\t$(co.allNode[0]).css({\'border\':\'dashed red 0\'});\n\t$(\'body\').click();\n}\n\n \n')])])]),e("backTop")],1)}),[],!1,null,null,null);n.default=i.exports}}]);