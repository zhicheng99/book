(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{345:function(e,n,t){"use strict";t.r(n);var i=t(10),r=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"js监听div的resize事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js监听div的resize事件"}},[e._v("#")]),e._v(" js监听div的resize事件")]),e._v(" "),t("p",[e._v("原文地址：http://zhangyiheng.com/blog/articles/div_resize.html")]),e._v(" "),t("h2",{attrs:{id:"需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#需求"}},[e._v("#")]),e._v(" 需求")]),e._v(" "),t("p",[e._v("开发过程中经常遇到的一个问题就是如何监听一个div的size变化。\n比如我用canvas绘制了一个chart，当canvas的size发生变化的时候，需要重新绘制里面的内容，这个时候就需要监听resize事件做处理。")]),e._v(" "),t("p",[e._v("window上虽然可以添加resize事件监听，但这并不能满足我们的需求，因为很多时候，div的size发生了变化，但是window的size并没有改变。\n不过我们可以间接利用window的resize事件监听来实现对于某个div的resize事件监听，请看下面具体实现。")]),e._v(" "),t("p",[e._v("对于div的resize事件的监听，实现方式有很多，比如周期性检查，通过scroll事件等等，本文主要介绍通过object元素来实现监听。")]),e._v(" "),t("h2",{attrs:{id:"具体实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#具体实现"}},[e._v("#")]),e._v(" 具体实现")]),e._v(" "),t("p",[t("img",{attrs:{src:"//common.cnblogs.com/images/copycode.gif",alt:"复制代码"}})]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * Created by taozh on 2017/5/6.\n * taozh1982@gmail.com\n */\nvar EleResize = {\n    _handleResize: function (e) {\n        var ele = e.target || e.srcElement;\n        var trigger = ele.__resizeTrigger__;\n        if (trigger) {\n            var handlers = trigger.__z_resizeListeners;\n            if (handlers) {\n                var size = handlers.length;\n                for (var i = 0; i < size; i++) {\n                    var h = handlers[i];\n                    var handler = h.handler;\n                    var context = h.context;\n                    handler.apply(context, [e]);\n                }\n            }\n        }\n    },\n    _removeHandler: function (ele, handler, context) {\n        var handlers = ele.__z_resizeListeners;\n        if (handlers) {\n            var size = handlers.length;\n            for (var i = 0; i < size; i++) {\n                var h = handlers[i];\n                if (h.handler === handler && h.context === context) {\n                    handlers.splice(i, 1);\n                    return;\n                }\n            }\n        }\n    },\n    _createResizeTrigger: function (ele) {\n        var obj = document.createElement('object');\n        obj.setAttribute('style',\n            'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden;opacity: 0; pointer-events: none; z-index: -1;');\n        obj.onload = EleResize._handleObjectLoad;\n        obj.type = 'text/html';\n        ele.appendChild(obj);\n        obj.data = 'about:blank';\n        return obj;\n    },\n    _handleObjectLoad: function (evt) {\n        this.contentDocument.defaultView.__resizeTrigger__ = this.__resizeElement__;\n        this.contentDocument.defaultView.addEventListener('resize', EleResize._handleResize);\n    }\n};\nif (document.attachEvent) {//ie9-10\n    EleResize.on = function (ele, handler, context) {\n        var handlers = ele.__z_resizeListeners;\n        if (!handlers) {\n            handlers = [];\n            ele.__z_resizeListeners = handlers;\n            ele.__resizeTrigger__ = ele;\n            ele.attachEvent('onresize', EleResize._handleResize);\n        }\n        handlers.push({\n            handler: handler,\n            context: context\n        });\n    };\n    EleResize.off = function (ele, handler, context) {\n        var handlers = ele.__z_resizeListeners;\n        if (handlers) {\n            EleResize._removeHandler(ele, handler, context);\n            if (handlers.length === 0) {\n                ele.detachEvent('onresize', EleResize._handleResize);\n                delete  ele.__z_resizeListeners;\n            }\n        }\n    }\n} else {\n    EleResize.on = function (ele, handler, context) {\n        var handlers = ele.__z_resizeListeners;\n        if (!handlers) {\n            handlers = [];\n            ele.__z_resizeListeners = handlers;\n\n            if (getComputedStyle(ele, null).position === 'static') {\n                ele.style.position = 'relative';\n            }\n            var obj = EleResize._createResizeTrigger(ele);\n            ele.__resizeTrigger__ = obj;\n            obj.__resizeElement__ = ele;\n        }\n        handlers.push({\n            handler: handler,\n            context: context\n        });\n    };\n    EleResize.off = function (ele, handler, context) {\n        var handlers = ele.__z_resizeListeners;\n        if (handlers) {\n            EleResize._removeHandler(ele, handler, context);\n            if (handlers.length === 0) {\n                var trigger = ele.__resizeTrigger__;\n                if (trigger) {\n                    trigger.contentDocument.defaultView.removeEventListener('resize', EleResize._handleResize);\n                    ele.removeChild(trigger);\n                    delete ele.__resizeTrigger__;\n                }\n                delete  ele.__z_resizeListeners;\n            }\n        }\n    }\n}\n")])])]),t("p",[t("img",{attrs:{src:"//common.cnblogs.com/images/copycode.gif",alt:"复制代码"}})]),e._v(" "),t("p"),e._v(" "),t("p",[e._v("测试代码：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif",alt:""}}),t("img",{attrs:{src:"https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif",alt:""}}),e._v(" "),t("img",{attrs:{src:"//common.cnblogs.com/images/copycode.gif",alt:"复制代码"}})]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Resize</title>\n    <script src="./EleResize.js"><\/script>\n    <style>\n        html, body {\n            margin: 0;\n            padding: 0;\n            width: 100%;\n            height: 100%;\n        }\n\n        #resizeDiv {\n            width: 60%;\n            height: 60%;\n            border: 1px solid red;\n            margin: 20px;\n        }\n\n        button {\n            margin: 20px 20px 0;\n        }\n    </style>\n</head>\n<body>\n<button onclick="addListener()">addListener</button>\n<button onclick="removeListener()">removeListener</button>\n<button onclick="resize()">resize</button>\n<div id="resizeDiv"></div>\n<script>\n    var resizeDiv = document.getElementById(\'resizeDiv\');\n    function resize() {\n        resizeDiv.style.width = "200px";\n    }\n    var listener = function () {\n        console.log("resize");\n    };\n    function addListener() {\n        EleResize.on(resizeDiv, listener);\n    }\n    function removeListener() {\n        EleResize.off(resizeDiv, listener)\n    }\n<\/script>\n</body>\n</html>\n')])])]),t("p",[t("img",{attrs:{src:"//common.cnblogs.com/images/copycode.gif",alt:"复制代码"}})]),e._v(" "),t("p",[e._v("View Code")]),e._v(" "),t("p"),e._v(" "),t("h2",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[e._v("#")]),e._v(" 原理")]),e._v(" "),t("p",[e._v("这里的具体实现分两类，")]),e._v(" "),t("ul",[t("li",[e._v("ie9-10")])]),e._v(" "),t("p",[e._v("默认支持div的resize事件，可以直接通过div.attachEvent('onresize', handler);的方式实现")]),e._v(" "),t("ul",[t("li",[e._v("其它浏览器")])]),e._v(" "),t("p",[e._v("通过在div中添加一个内置object元素实现监听。\n　　　　设置object元素的style使其填充满div，这样当div的size发生变化时，object的size也会发生变化。\n　　　　然后监听object元素的contentDocument.defaultView(window对象)的resize事件。")]),e._v(" "),t("p",[e._v("注：本文提供的是如何监听resize事件，其实在resize时，可能会连续快速的触发(比如拖动浏览器)，为了提高效率，可以考虑使用批处理的模式。")]),e._v(" "),t("p",[e._v("文章来源：https://www.cnblogs.com/zhtui/p/7059943.html")]),e._v(" "),t("backTop")],1)}),[],!1,null,null,null);n.default=r.exports}}]);