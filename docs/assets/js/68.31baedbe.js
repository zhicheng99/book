(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{401:function(e,n,a){"use strict";a.r(n);var r=a(10),t=Object(r.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"object-defineproperty-详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty-详解"}},[e._v("#")]),e._v(" "),a("code",[e._v("Object.defineProperty()详解")])]),e._v(" "),a("p",[e._v("在园子里看到一篇讲解Object.defineProperty()的非常好的博文，我把他转载过来，给自己留个笔记。原文出处https://www.cnblogs.com/junjun-001/p/11761252.html#commentform")]),e._v(" "),a("p",[e._v("菜菜： “老大，那个， Object.defineProperty 是什么鬼？”")]),e._v(" "),a("p",[e._v("假设我们有个对象 user ; 我们要给它增加一个属性 name , 我们会这么做")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1 var user = {};\n2 user.name="狂奔的蜗牛";\n3 console.log(user);//{name: "狂奔的蜗牛"}\n')])])]),a("p",[e._v("如果想要增加一个sayHi方法叻？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1 user.sayHi=function () { console.log("Hi !") };\n2 console.log(user);//{name: "狂奔的蜗牛", sayHi: ƒn}\n')])])]),a("p",[a("code",[e._v("Object.defineProperty")]),e._v("就是做这个的")]),e._v(" "),a("p",[e._v("**　　那么Object.defineProperty 怎么用？**")]),e._v(" "),a("p",[e._v("Object.defineProperty 需要三个参数（object , propName , descriptor）")]),e._v(" "),a("p",[e._v("1 object 对象 => 给谁加\n　　2 propName 属性名 => 要加的属性的名字 【类型：String】\n　　3 descriptor 属性描述 => 加的这个属性有什么样的特性【类型：Object】")]),e._v(" "),a("p",[e._v("那么 "),a("code",[e._v("descriptor")]),e._v("这个是个对象 ，他有那些属性呢 ? 别着急我们一个一个说；")]),e._v(" "),a("p",[e._v("既然可以给一个对象增加属性，那么我们用它来做一下给 user添加 name属性，代码是这样的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1 var user = {};\n2 Object.defineProperty(user,"name",{\n3  value:"狂奔的蜗牛"\n4 })\n5 console.log(user);//{name: "狂奔的蜗牛"}\n')])])]),a("p",[a("strong",[e._v("说明")]),e._v(" 是的还是那个经典的 "),a("code",[e._v("value")]),e._v("属性，他就是设置属性值的。")]),e._v(" "),a("p",[e._v("等等，属性值只能为字符串吗？我们的 number function Object boolean 等呢？")]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' 1 var user = {};\n 2 Object.defineProperty(user,"name",{\n 3  value:"狂奔的蜗牛"\n 4 })\n 5 Object.defineProperty(user,"isSlow",{\n 6  value:true\n 7 })\n 8 Object.defineProperty(user,"sayHi",{\n 9  value:function () { console.log("Hi !") }\n10 })\n11 Object.defineProperty(user,"age",{\n12  value:12\n13 })\n14 Object.defineProperty(user,"birth",{\n15  value:{\n16   date:"2018-06-29",\n17   hour:"15:30"\n18  }\n19 })\n20 console.log(user);\n')])])]),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/161934502610.png",alt:""}})]),e._v(" "),a("p",[a("strong",[e._v("说明")]),e._v(" 事实证明任何类型的数据都是可以的哦~")]),e._v(" "),a("p",[e._v("问题又来了，如果 user对象已经有了name属性，我们可以通过Object.defineProperty改变这个值吗？")]),e._v(" "),a("p",[e._v("我们来试试")]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1 var user = {};\n2 Object.defineProperty(user,"name",{\n3  value:"狂奔的蜗牛"\n4 })\n5 console.log(user);\n6 user.name="新=>狂奔的蜗牛"\n7 console.log(user);\n')])])]),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("p",[e._v("咦？？为什么我改了没作用勒？？")]),e._v(" "),a("p",[e._v("原因：上边说了descriptor有很多属性，除了value属性还有个 writable【顾名思义属性是否可以被重新赋值】接受数据类型为 boolean（默认为false） true => 支持被重新赋值 false=>只读")]),e._v(" "),a("p",[e._v("哦哦，原来如果我没设置writable值的时候就默认只读啊，所以才改不掉")]),e._v(" "),a("p",[e._v("那我们看看，设置为true，是不是就可以改掉了。")]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1 var user = {};\n2 Object.defineProperty(user,"name",{\n3  value:"狂奔的蜗牛",\n4  writable:true\n5 })\n6 console.log(user);\n7 user.name="新=>狂奔的蜗牛"\n8 console.log(user);\n')])])]),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450269.png",alt:""}})]),e._v(" "),a("p",[e._v("这个descriptor还有其他的属性吗？enumerable【顾名思义属性是否可以被枚举】接受数据类型为 boolean（默认为false） true => 支持被枚举 false=>不支持")]),e._v(" "),a("p",[e._v("额。。。枚举？？什....什么意思？")]),e._v(" "),a("p",[e._v("假设我们想知道这个 user对象有哪些属性我们一般会这么做")]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" 1 var user ={\n 2  name:\"狂奔的蜗牛\",\n 3  age:25\n 4 } ;\n 5  \n 6 //es6\n 7 var keys=Object.keys(user)\n 8 console.log(keys);// ['name','age']\n 9 //es5\n10 var keys=[];\n11 for(key in user){\n12  keys.push(key);\n13 } \n14 console.log(keys);// ['name','age'] \n")])])]),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("p",[e._v("如果我们使用 Object.的方式定义属性会发生什么呢？我们来看下输出")]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' 1 var user ={\n 2  name:"狂奔的蜗牛",\n 3  age:25\n 4 } ;\n 5 //定义一个性别 可以被枚举\n 6 Object.defineProperty(user,"gender",{\n 7  value:"男",\n 8  enumerable:true\n 9 })\n10  \n11 //定义一个出生日期 不可以被枚举\n12 Object.defineProperty(user,"birth",{\n13  value:"1956-05-03",\n14  enumerable:false\n15 })\n16  \n17 //es6\n18 var keys=Object.keys(user)\n19 console.log(keys);\n20 // ["name", "age", "gender"]\n21  \n22 console.log(user);\n23 // {name: "狂奔的蜗牛", age: 25, gender: "男", birth: "1956-05-03"}\n24 console.log(user.birth);\n25 // 1956-05-03 \n')])])]),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("p",[a("strong",[e._v("说明")]),e._v("　很明显，我们定义为　"),a("code",[e._v("enumerable=false")]),e._v("的 "),a("code",[e._v("birth")]),e._v("属性并没有被遍历出来，遍历 => 其实就是枚举（个人理解啦，不喜勿喷哦~）")]),e._v(" "),a("p",[e._v("**　　总结　**"),a("code",[e._v("enumerable")]),e._v("属性取值为 "),a("code",[e._v("布尔类型 true | false")]),e._v("默认值为 "),a("code",[e._v("false")]),e._v("，为真属性可以被枚举；反之则不能。此设置不影响属性的调用和 查看对象的值。")]),e._v(" "),a("p",[a("code",[e._v("configurable")]),e._v("是接下来我们要讲的一个属性，这个属性有两个作用：")]),e._v(" "),a("p",[e._v("1 属性是否可以被删除\n　　2 属性的特性在第一次设置之后可否被重新定义特性")]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' 1 var user ={\n 2  name:"狂奔的蜗牛",\n 3  age:25\n 4 } ;\n 5 //定义一个性别 不可以被删除和重新定义特性\n 6 Object.defineProperty(user,"gender",{\n 7  value:"男",\n 8  enumerable:true,\n 9  configurable:false\n10 })\n11  \n12 //删除一下\n13 delete user.gender;\n14 console.log(user);//{name: "狂奔的蜗牛", age: 25, gender: "男"}\n15  \n16 //重新定义特性\n17 Object.defineProperty(user,"gender",{\n18  value:"男",\n19  enumerable:true,\n20  configurable:true\n21 })\n22 // Uncaught TypeError: Cannot redefine property: gender\n23 //会报错，如下图\n')])])]),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450272.png",alt:""}})]),e._v(" "),a("p",[e._v("设置为 true")]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' 1 var user ={\n 2  name:"狂奔的蜗牛",\n 3  age:25\n 4 } ;\n 5 //定义一个性别 可以被删除和重新定义特性\n 6 Object.defineProperty(user,"gender",{\n 7  value:"男",\n 8  enumerable:true,\n 9  configurable:true\n10 })\n11  \n12 //删除前\n13 console.log(user);\n14 // {name: "狂奔的蜗牛", age: 25, gender: "男"}\n15  \n16 //删除一下\n17 delete user.gender;\n18 console.log(user);\n19 // {name: "狂奔的蜗牛", age: 25}\n20  \n21 //重新定义特性\n22 Object.defineProperty(user,"gender",{\n23  value:"男",\n24  enumerable:true,\n25  configurable:false\n26 })\n27  \n28 //删除前\n29 console.log(user);\n30 // {name: "狂奔的蜗牛", age: 25, gender: "男"}\n31 //删除一下 删除失败\n32 delete user.gender;\n33 console.log(user);\n34 // {name: "狂奔的蜗牛", age: 25, gender: "男"}\n')])])]),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("p",[a("strong",[e._v("总结")]),e._v(" "),a("code",[e._v("configurable")]),e._v("设置为 true 则该属性可以被删除和重新定义特性；反之属性是不可以被删除和重新定义特性的，默认值为false（Ps."),a("code",[e._v("除了可以给新定义的属性设置特性，也可以给已有的属性设置特性哈")]),e._v("）")]),e._v(" "),a("p",[e._v("最后我们来说说，最重要的两个属性 "),a("code",[e._v("set")]),e._v("和 "),a("code",[e._v("get")]),e._v("（即存取器描述：定义属性如何被存取），这两个属性是做什么用的呢？我们通过代码来看看")]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' 1 var user ={\n 2  name:"狂奔的蜗牛"\n 3 } ;\n 4 var count = 12;\n 5 //定义一个age 获取值时返回定义好的变量count\n 6 Object.defineProperty(user,"age",{\n 7  get:function(){\n 8   return count;\n 9  }\n10 })\n11 console.log(user.age);//12\n12  \n13 //如果我每次获取的时候返回count+1呢\n14 var user ={\n15  name:"狂奔的蜗牛"\n16 } ;\n17 var count = 12;\n18 //定义一个age 获取值时返回定义好的变量count\n19 Object.defineProperty(user,"age",{\n20  get:function(){\n21   return count+1;\n22  }\n23 })\n24 console.log(user.age);//13\n')])])]),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("p",[e._v("接下来我不用解释了吧，你想在获取该属性的时候对值做什么随你咯~")]),e._v(" "),a("p",[e._v("来来来，我们看看 set，不多说上代码")]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' 1 var user ={\n 2  name:"狂奔的蜗牛"\n 3 } ;\n 4 var count = 12;\n 5 //定义一个age 获取值时返回定义好的变量count\n 6 Object.defineProperty(user,"age",{\n 7  get:function(){\n 8   return count;\n 9  },\n10  set:function(newVal){\n11   count=newVal;\n12  }\n13 })\n14 console.log(user.age);//12\n15 user.age=145;\n16 console.log(user.age);//145\n17 console.log(count);//145\n18  \n19 //等等，如果我想设置的时候是 自动加1呢？我设置145 实际上设置是146\n20  \n21 var user ={\n22  name:"狂奔的蜗牛"\n23 } ;\n24 var count = 12;\n25 //定义一个age 获取值时返回定义好的变量count\n26 Object.defineProperty(user,"age",{\n27  get:function(){\n28   return count;\n29  },\n30  set:function(newVal){\n31   count=newVal+1;\n32  }\n33 })\n34 console.log(user.age);//12\n35 user.age=145;\n36 console.log(user.age);//146\n37 console.log(count);//146\n')])])]),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("p",[e._v("**说明 **注意：当使用了getter或setter方法，不允许使用writable和value这两个属性(如果使用，会直接报错滴)")]),e._v(" "),a("p",[a("code",[e._v("get")]),e._v("是获取值的时候的方法，类型为 "),a("code",[e._v("function")]),e._v("，获取值的时候会被调用，不设置时为 "),a("code",[e._v("undefined")])]),e._v(" "),a("p",[a("code",[e._v("set")]),e._v("是设置值的时候的方法，类型为 "),a("code",[e._v("function")]),e._v("，设置值的时候会被调用，"),a("code",[e._v("undefined")])]),e._v(" "),a("p",[e._v("get或set不是必须成对出现，任写其一就可以")]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' 1 var user ={\n 2  name:"狂奔的蜗牛"\n 3 } ;\n 4 var count = 12;\n 5 //定义一个age 获取值时返回定义好的变量count\n 6 Object.defineProperty(user,"age",{\n 7  get:function(){\n 8   console.log("这个人来获取值了！！");\n 9   return count;\n10  },\n11  set:function(newVal){\n12   console.log("这个人来设置值了！！");\n13   count=newVal+1;\n14  }\n15 })\n16 console.log(user.age);//12\n17 user.age=145;\n18 console.log(user.age);//146\n')])])]),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450271.gif",alt:"复制代码"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"Public/upload/20210425/16193450270.png",alt:""}})]),e._v(" "),a("p",[a("strong",[e._v("【完结】")])]),e._v(" "),a("p",[a("code",[e._v("Object.defineProperty")]),e._v("方法直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象")]),e._v(" "),a("ul",[a("li",[e._v("value: 设置属性的值")]),e._v(" "),a("li",[e._v("writable: 值是否可以重写。true | false")]),e._v(" "),a("li",[e._v("enumerable: 目标属性是否可以被枚举。true | false")]),e._v(" "),a("li",[e._v("configurable: 目标属性是否可以被删除或是否可以再次修改特性 true | false")]),e._v(" "),a("li",[e._v("set: 目标属性设置值的方法")]),e._v(" "),a("li",[e._v("get：目标属性获取值的方法")])]),e._v(" "),a("p",[e._v("文章来源：https://www.cnblogs.com/ldq678/p/13854113.html")]),e._v(" "),a("backTop")],1)}),[],!1,null,null,null);n.default=t.exports}}]);