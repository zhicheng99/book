(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{290:function(e,t,a){"use strict";a.r(t);var v=a(10),_=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"一道被人轻视的前端面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一道被人轻视的前端面试题"}},[e._v("#")]),e._v(" 一道被人轻视的前端面试题")]),e._v(" "),a("h3",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[e._v("#")]),e._v(" 题目：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Foo() {\n    getName = function () { alert (1); };\n    return this;\n}\nFoo.getName = function () { alert (2);};\nFoo.prototype.getName = function () { alert (3);};\nvar getName = function () { alert (4);};\nfunction getName() { alert (5);}\n//请写出以下输出结果：\nFoo.getName();\ngetName();\nFoo().getName();\ngetName();\nnew Foo.getName();\nnew Foo().getName();\nnew new Foo().getName()\n")])])]),a("h3",{attrs:{id:"答案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答案"}},[e._v("#")]),e._v(" 答案：")]),e._v(" "),a("blockquote",[a("p",[e._v("Foo.getName();//2\ngetName();//4\nFoo().getName();//1\ngetName();//1\nnew Foo.getName();//2\nnew Foo().getName();//3\nnew new Foo().getName();//3")])]),e._v(" "),a("p",[e._v("此题涉及的知识点众多，包括变量定义提升、this指针指向、运算符优先级、原型、继承、全局变量污染、对象属性及原型属性优先级等等。")]),e._v(" "),a("p",[a("em",[e._v("此题包含7小问，分别说下。")])]),e._v(" "),a("h3",{attrs:{id:"第一问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一问"}},[e._v("#")]),e._v(" 第一问：")]),e._v(" "),a("p",[e._v("先看此题的上半部分做了什么，首先定义了一个叫Foo的函数，之后为Foo创建了一个叫getName的静态属性存储了一个匿名函数，之后为Foo的原型对象新创建了一个叫getName的匿名函数。之后又通过函数变量表达式创建了一个getName的函数，最后再声明一个叫getName函数。")]),e._v(" "),a("p",[e._v("第一问的 Foo.getName 自然是访问Foo函数上存储的静态属性，自然是2，没什么可说的。")]),e._v(" "),a("h3",{attrs:{id:"第二问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二问"}},[e._v("#")]),e._v(" 第二问：")]),e._v(" "),a("p",[e._v("第二问，直接调用 getName 函数。既然是直接调用那么就是访问当前上文作用域内的叫getName的函数，所以跟1 2 3都没什么关系。此题有无数面试者回答为5。此处有两个坑，一是变量声明提升，二是函数表达式。")]),e._v(" "),a("p",[e._v("变量声明提升即所有声明变量或声明函数都会被提升到当前函数的顶部。")]),e._v(" "),a("p",[e._v("例如下代码:")]),e._v(" "),a("p",[e._v("console.log('x' in window);//true")]),e._v(" "),a("p",[e._v("var x;")]),e._v(" "),a("p",[e._v("x = 0;")]),e._v(" "),a("p",[e._v("代码执行时js引擎会将声明语句提升至代码最上方，变为：")]),e._v(" "),a("p",[e._v("var x;")]),e._v(" "),a("p",[e._v("console.log('x' in window);//true")]),e._v(" "),a("p",[e._v("x = 0;")]),e._v(" "),a("p",[e._v("函数表达式")]),e._v(" "),a("p",[e._v("var getName 与 function getName 都是声明语句，区别在于 var getName 是函数表达式，而 function getName 是函数声明。关于JS中的各种函数创建方式可以看 大部分人都会做错的经典JS闭包面试题 这篇文章有详细说明。")]),e._v(" "),a("p",[e._v("函数表达式最大的问题，在于js会将此代码拆分为两行代码分别执行。")]),e._v(" "),a("p",[e._v("例如下代码：")]),e._v(" "),a("p",[e._v("console.log(x);//输出：function x(){}")]),e._v(" "),a("p",[e._v("var x=1;")]),e._v(" "),a("p",[e._v("function x(){}")]),e._v(" "),a("p",[e._v("实际执行的代码为，先将 var x=1 拆分为 var x; 和 x = 1; 两行，再将 var x; 和 function x(){} 两行提升至最上方变成：")]),e._v(" "),a("p",[e._v("var x;")]),e._v(" "),a("p",[e._v("function x(){}")]),e._v(" "),a("p",[e._v("console.log(x);")]),e._v(" "),a("p",[e._v("x=1;")]),e._v(" "),a("p",[e._v("所以最终函数声明的x覆盖了变量声明的x，log输出为x函数。")]),e._v(" "),a("p",[e._v("同理，原题中代码最终执行时的是：")]),e._v(" "),a("p",[e._v("function Foo() {")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("getName = function () { alert (1); };\n\nreturn this;\n")])])]),a("p",[e._v("}")]),e._v(" "),a("p",[e._v("var getName;//只提升变量声明")]),e._v(" "),a("p",[e._v("function getName() { alert (5);}//提升函数声明，覆盖var的声明")]),e._v(" "),a("p",[e._v("Foo.getName = function () { alert (2);};")]),e._v(" "),a("p",[e._v("Foo.prototype.getName = function () { alert (3);};")]),e._v(" "),a("p",[e._v("getName = function () { alert (4);};//最终的赋值再次覆盖function getName声明")]),e._v(" "),a("p",[e._v("getName();//最终输出4")]),e._v(" "),a("h3",{attrs:{id:"第三问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三问"}},[e._v("#")]),e._v(" 第三问：")]),e._v(" "),a("p",[e._v("第三问的 Foo().getName(); 先执行了Foo函数，然后调用Foo函数的返回值对象的getName属性函数。")]),e._v(" "),a("p",[e._v("Foo函数的第一句  getName = function () { alert (1); };  是一句函数赋值语句，注意它没有var声明，所以先向当前Foo函数作用域内寻找getName变量，没有。再向当前函数作用域上层，即外层作用域内寻找是否含有getName变量，找到了，也就是第二问中的alert(4)函数，将此变量的值赋值为 function(){alert(1)}。")]),e._v(" "),a("p",[e._v("此处实际上是将外层作用域内的getName函数修改了。")]),e._v(" "),a("p",[e._v("注意：此处若依然没有找到会一直向上查找到window对象，若window对象中也没有getName属性，就在window对象中创建一个getName变量。")]),e._v(" "),a("p",[e._v("之后Foo函数的返回值是this，而JS的this问题博客园中已经有非常多的文章介绍，这里不再多说。")]),e._v(" "),a("p",[e._v("简单的讲，this的指向是由所在函数的调用方式决定的。而此处的直接调用方式，this指向window对象。")]),e._v(" "),a("p",[e._v("遂Foo函数返回的是window对象，相当于执行 window.getName() ，而window中的getName已经被修改为alert(1)，所以最终会输出1")]),e._v(" "),a("p",[e._v("此处考察了两个知识点，一个是变量作用域问题，一个是this指向问题。")]),e._v(" "),a("h3",{attrs:{id:"第四问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四问"}},[e._v("#")]),e._v(" 第四问：")]),e._v(" "),a("p",[e._v("直接调用getName函数，相当于 window.getName() ，因为这个变量已经被Foo函数执行时修改了，遂结果与第三问相同，为1")]),e._v(" "),a("h3",{attrs:{id:"第五问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第五问"}},[e._v("#")]),e._v(" 第五问：")]),e._v(" "),a("p",[e._v("第五问 new Foo.getName(); ,此处考察的是js的运算符优先级问题。")]),e._v(" "),a("p",[e._v("js运算符优先级:")]),e._v(" "),a("p",[a("img",{attrs:{src:"//upload-images.jianshu.io/upload_images/3164024-a91d57f7d367c90f.png",alt:""}})]),e._v(" "),a("p",[e._v("图片发自简书App")]),e._v(" "),a("p",[e._v("参考链接：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence")]),e._v(" "),a("p",[e._v("通过查上表可以得知点（.）的优先级高于new操作，遂相当于是:")]),e._v(" "),a("p",[e._v("new (Foo.getName)();")]),e._v(" "),a("p",[e._v("所以实际上将getName函数作为了构造函数来执行，遂弹出2。")]),e._v(" "),a("h3",{attrs:{id:"第六问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第六问"}},[e._v("#")]),e._v(" 第六问：")]),e._v(" "),a("p",[e._v("第六问 new Foo().getName() ，首先看运算符优先级括号高于new，实际执行为")]),e._v(" "),a("p",[e._v("(new Foo()).getName()")]),e._v(" "),a("p",[e._v("遂先执行Foo函数，而Foo此时作为构造函数却有返回值，所以这里需要说明下js中的构造函数返回值问题。")]),e._v(" "),a("p",[e._v("构造函数的返回值")]),e._v(" "),a("p",[e._v("在传统语言中，构造函数不应该有返回值，实际执行的返回值就是此构造函数的实例化对象。")]),e._v(" "),a("p",[e._v("而在js中构造函数可以有返回值也可以没有。")]),e._v(" "),a("ol",[a("li",[e._v("没有返回值则按照其他语言一样返回实例化对象。")]),e._v(" "),a("li",[e._v("若有返回值则检查其返回值是否为引用类型。如果是非引用类型，如基本类型（string,number,boolean,null,undefined）则与无返回值相同，实际返回其实例化对象。")]),e._v(" "),a("li",[e._v("若返回值是引用类型，则实际返回值为这个引用类型。")])]),e._v(" "),a("p",[e._v("原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象，遂最终Foo函数返回实例化对象。")]),e._v(" "),a("p",[e._v("之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，找到了。")]),e._v(" "),a("p",[e._v("遂最终输出3。")]),e._v(" "),a("h3",{attrs:{id:"第七问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第七问"}},[e._v("#")]),e._v(" 第七问：")]),e._v(" "),a("p",[e._v("第七问, new new Foo().getName(); 同样是运算符优先级问题。")]),e._v(" "),a("p",[e._v("最终实际执行为：")]),e._v(" "),a("p",[e._v("new ((new Foo()).getName)();")]),e._v(" "),a("p",[e._v("先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new。")]),e._v(" "),a("p",[e._v("遂最终结果为3")]),e._v(" "),a("p",[e._v("这里确实是(new Foo()).getName()，但是跟括号优先级高于成员访问没关系，实际上这里成员访问的优先级是最高的，因此先执行了 .getName，但是在进行左侧取值的时候， new Foo() 可以理解为两种运算：new 带参数（即 new Foo()）和函数调用（即 先 Foo() 取值之后再 new），而 new 带参数的优先级是高于函数调用的，因此先执行了 new Foo()，或得 Foo 类的实例对象，再进行了成员访问 .getName。")]),e._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结：")]),e._v(" "),a("p",[e._v("此题并不是很难，到考到的知识点却很多，包括变量定义提升、this指针指向、运算符优先级、原型、继承、全局变量污染、对象属性及原型属性优先级等等。但可能很多人不能完全回答出来，只能说有一些人太急躁太轻视了，希望大家通过此文了解js一些特性。")]),e._v(" "),a("p",[e._v("文章来源：https://www.jianshu.com/p/8cee7dacd5b6")]),e._v(" "),a("backTop")],1)}),[],!1,null,null,null);t.default=_.exports}}]);