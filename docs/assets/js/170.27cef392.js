(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{447:function(e,t,s){"use strict";s.r(t);var n=s(10),v=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"五分钟看懂-nginx-负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五分钟看懂-nginx-负载均衡"}},[e._v("#")]),e._v(" 五分钟看懂 Nginx 负载均衡")]),e._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),s("p",[e._v("对于电商平台而言，随着业务的不断发展壮大，网站访问量和数据量也随之急剧增长，该情况的产生给服务器带来了一定的负担。从用户体验层面而言，由于服务器端数据处理带来的时延，往往导致页面的响应速度过慢、操作流畅性受阻等问题。这在某种程度上甚至会潜在影响平台的成交量。提供高效率，高质量的服务成为亟待解决的问题。负载均衡策略的出现和发展成为缓解上述问题的有效途径。本文将带你了解基于 Nginx 实现的负载均衡。")]),e._v(" "),s("h2",{attrs:{id:"什么是负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是负载均衡"}},[e._v("#")]),e._v(" 什么是负载均衡")]),e._v(" "),s("p",[e._v("负载均衡（Load Balance），它在网络现有结构之上可以提供一种廉价、有效、透明的方法来扩展网络设备和服务器的带宽，并可以在一定程度上增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性等。用官网的话说，它充当着网络流中“交通指挥官”的角色，“站在”服务器前处理所有服务器端和客户端之间的请求，从而最大程度地提高响应速率和容量利用率，同时确保任何服务器都没有超负荷工作。如果单个服务器出现故障，负载均衡的方法会将流量重定向到其余的集群服务器，以保证服务的稳定性。当新的服务器添加到服务器组后，也可通过负载均衡的方法使其开始自动处理客户端发来的请求。（详情可参考：What Is Load Balancing?）")]),e._v(" "),s("p",[e._v("简言之，负载均衡实际上就是将大量请求进行分布式处理的策略。")]),e._v(" "),s("h2",{attrs:{id:"什么是-nginx-负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-nginx-负载均衡"}},[e._v("#")]),e._v(" 什么是 Nginx 负载均衡")]),e._v(" "),s("p",[e._v("通过上文简单的概念介绍，你可能对负载均衡有了一个初步的了解，知道它是一种调度策略。那么问题来了，Nginx 又是什么呢？Nginx 如何实现负载均衡？这就要从正向代理和反向代理说起了。")]),e._v(" "),s("ul",[s("li",[s("p",[s("strong",[e._v("正向代理")])]),e._v(" "),s("p",[e._v("正向代理（Forward Proxy）最大的特点是，客户端非常明确要访问的服务器地址，它代理客户端，替客户端发出请求。比如：科学上网，俗称翻墙（警告 ：翻墙操作违反相关法律规定，本文只是为了解释正向代理向读者举个例子，仅供学习参考，切勿盲目翻墙）。")]),e._v(" "),s("p",[s("img",{attrs:{src:"Public/upload/2020-03-31/5e83540a59e37.png",alt:"",title:"5e83540a59e37.png"}})]),e._v(" "),s("p",[e._v("假设客户端想要访问 Google，它明确知道待访问的服务器地址是 www.google.com/，但由于条件限制，它找… Google 的”朋友”：代理服务器。客户端把请求发给代理服务器，由代理服务器代替它请求 Google，最终再将响应返回给客户端。这便是一次正向代理的过程，该过程中服务器并不知道真正发出请求的是谁。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("反向代理")])]),e._v(" "),s("p",[e._v("那么，随着请求量的爆发式增长，服务器觉得自己一个人始终是应付不过来，需要兄弟服务器们帮忙，于是它喊来了自己的兄弟以及代理服务器朋友。 此时，来自不同客户端的所有请求实际上都发到了代理服务器处，再由代理服务器按照一定的规则将请求分发给各个服务器。")]),e._v(" "),s("p",[e._v("这就是反向代理（Reverse Proxy），反向代理隐藏了服务器的信息，它代理的是服务器端，代其接收请求。换句话说，反向代理的过程中，客户端并不知道具体是哪台服务器处理了自己的请求。如此一来，既提高了访问速度，又为安全性提供了保证。")]),e._v(" "),s("p",[s("img",{attrs:{src:"Public/upload/2020-03-31/5e83543105990.png",alt:"",title:"5e83543105990.png"}})]),e._v(" "),s("p",[e._v("在这之中，反向代理需要考虑的问题是，如何进行均衡分工，控制流量，避免出现局部节点负载过大的问题。通俗的讲，就是如何为每台服务器合理的分配请求，使其整体具有更高的工作效率和资源利用率。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("Nginx 是什么？")])]),e._v(" "),s("p",[e._v("Nginx 作为一个基于 C 实现的高性能 Web 服务器，可以通过系列算法解决上述的负载均衡问题。并且由于它具有高并发、高可靠性、高扩展性、开源等特点，成为开发人员常用的反向代理工具。")])])]),e._v(" "),s("h2",{attrs:{id:"负载均衡常用算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡常用算法"}},[e._v("#")]),e._v(" 负载均衡常用算法")]),e._v(" "),s("p",[s("strong",[e._v("1. 轮询 （round-robin）")])]),e._v(" "),s("p",[e._v("轮询为负载均衡中较为基础也较为简单的算法，它不需要配置额外参数。假设配置文件中共有 "),s("strong",[e._v("M")]),e._v(" 台服务器，该算法遍历服务器节点列表，并按节点次序每轮选择一台服务器处理请求。当所有节点均被调用过一次后，该算法将从第一个节点开始重新一轮遍历。")]),e._v(" "),s("p",[s("strong",[e._v("特点")]),e._v("：由于该算法中每个请求按时间顺序逐一分配到不同的服务器处理，因此适用于服务器性能相近的集群情况，其中每个服务器承载相同的负载。但对于服务器性能不同的集群而言，该算法容易引发资源分配不合理等问题。")]),e._v(" "),s("p",[s("strong",[e._v("2、加权轮询")])]),e._v(" "),s("p",[e._v("为了避免普通轮询带来的弊端，加权轮询应运而生。在加权轮询中，每个服务器会有各自的 "),s("code",[e._v("weight")]),e._v("。一般情况下，"),s("code",[e._v("weight")]),e._v(" 的值越大意味着该服务器的性能越好，可以承载更多的请求。该算法中，客户端的请求按权值比例分配，当一个请求到达时，优先为其分配权值最大的服务器。")]),e._v(" "),s("p",[s("strong",[e._v("特点")]),e._v("：加权轮询可以应用于服务器性能不等的集群中，使资源分配更加合理化。")]),e._v(" "),s("p",[e._v("Nginx 加权轮询源码可见：ngx_http_upstream_round_robin.c，源码分析可参考：关于轮询策略原理的自我理解。其核心思想是，遍历各服务器节点，并计算节点权值，计算规则为 "),s("code",[e._v("current_weight")]),e._v(" 与其对应的 "),s("code",[e._v("effective_weight")]),e._v(" 之和，每轮遍历中选出权值最大的节点作为最优服务器节点。其中 "),s("code",[e._v("effective_weight")]),e._v(" 会在算法的执行过程中随资源情况和响应情况而改变。较为核心的部分如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("for (peer = rrp->peers->peer, i = 0;\n\tpeer; \t/* peer 为当前遍历的服务器结点*/\n  peer = peer->next, i++)\n{\n  ...\n    \n\t/* 每轮遍历会更新 peer 当前的权值*/\n\tpeer->current_weight += peer->effective_weight;\n\n  ...\n    \n\t/* best 为当前服务器中的最优节点，即本轮中选中的服务器节点*/\n\tif (best == NULL || peer->current_weight > best->current_weight) {\n\t\tbest = peer;\n  \tp = i;\n\t}\n  \n  ...\n}\n复制代码\n")])])]),s("p",[s("strong",[e._v("3. IP 哈希（IP hash）")])]),e._v(" "),s("p",[s("code",[e._v("ip_hash")]),e._v(" 依据发出请求的客户端 IP 的 hash 值来分配服务器，该算法可以保证同 IP 发出的请求映射到同一服务器，或者具有相同 hash 值的不同 IP 映射到同一服务器。")]),e._v(" "),s("p",[s("strong",[e._v("特点")]),e._v("：该算法在一定程度上解决了集群部署环境下 Session 不共享的问题。")]),e._v(" "),s("blockquote",[s("p",[e._v("Session 不共享问题是说，假设用户已经登录过，此时发出的请求被分配到了 A 服务器，但 A 服务器突然宕机，用户的请求则会被转发到 B 服务器。但由于 Session 不共享，B 无法直接读取用户的登录信息来继续执行其他操作。")])]),e._v(" "),s("p",[e._v("实际应用中，我们可以利用 "),s("code",[e._v("ip_hash")]),e._v("，将一部分 IP 下的请求转发到运行新版本服务的服务器，另一部分转发到旧版本服务器上，实现灰度发布。再者，如遇到文件过大导致请求超时的情况，也可以利用 "),s("code",[e._v("ip_hash")]),e._v(" 进行文件的分片上传，它可以保证同客户端发出的文件切片转发到同一服务器，利于其接收切片以及后续的文件合并操作。")]),e._v(" "),s("p",[s("strong",[e._v("4、其他算法")])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("URL hash")]),e._v(" "),s("p",[s("code",[e._v("url_hash")]),e._v(" 是根据请求的 URL 的 hash 值来分配服务器。该算法的特点是，相同 URL 的请求会分配给固定的服务器，当存在缓存的时候，效率一般较高。然而 Nginx 默认不支持这种负载均衡算法，需要依赖第三方库。")])]),e._v(" "),s("li",[s("p",[e._v("最小连接数（Least Connections）")]),e._v(" "),s("p",[e._v("假设共有 M 台服务器，当有新的请求出现时，遍历服务器节点列表并选取其中连接数最小的一台服务器来响应当前请求。连接数可以理解为当前处理的请求数。")])])]),e._v(" "),s("h2",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[e._v("#")]),e._v(" 应用场景")]),e._v(" "),s("p",[e._v("说了这么多理论，究竟基于 Nginx 的负载均衡要怎么用呢？接下来，将以加权轮询算法为例，带大家尝试通过自己的一台笔记本 + Nginx + Node 测试一下负载均衡。由于没有多台服务器，于是通过自己笔记本的多个不同端口来模拟不同的服务器。")]),e._v(" "),s("p",[s("strong",[e._v("Step 1")]),e._v("：确保自己的电脑中，Nginx 已安装并能够成功启动（以 Mac 为例）")]),e._v(" "),s("p",[e._v("如果你也遇到了像我一样由于端口占用导致 Nginx 启动失败的问题，可以尝试下述步骤修改配置文件中的端口号")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("相关文件路径")]),e._v(" "),s("ul",[s("li",[e._v("/usr/local/etc/nginx/nginx.conf （配置文件路径）")]),e._v(" "),s("li",[e._v("/usr/local/var/www （服务器默认路径）")]),e._v(" "),s("li",[e._v("/usr/local/Cellar/nginx/1.8.0 （安装路径）")])])]),e._v(" "),s("li",[s("p",[e._v("修改 nginx.conf 文件中的端口")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server {\n  # listen       8080;\n  listen       8086;\n  server_name  localhost;\n}\n复制代码\n")])])]),s("p",[e._v("Nginx 配置文件 nginx.conf 中主要包含以下几个部分：")]),e._v(" "),s("ul",[s("li",[e._v("server：主机服务相关设置，主要用于指定虚拟主机域名、IP 和端口")]),e._v(" "),s("li",[e._v("location：URL 匹配特定位置后的设置，反向代理设置")]),e._v(" "),s("li",[e._v("upstream：负载均衡相关配置")])])]),e._v(" "),s("li",[s("p",[e._v("暂停 Nginx 并重启")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 暂停 Nginx 服务\nsudo nginx -s stop\n// 启动 Nginx 服务\nnginx\n复制代码\n")])])])]),e._v(" "),s("li",[s("p",[e._v("打开 http://localhost:8086/ 测试是否成功，如果显示下图，则证明启动成功 ～")]),e._v(" "),s("p",[s("img",{attrs:{src:"Public/upload/2020-03-31/5e8354984d793.png",alt:"",title:"5e8354984d793.png"}})])])]),e._v(" "),s("p",[s("strong",[e._v("Step 2")]),e._v("：基于 Node + Express 框架来搭建简单的服务器")]),e._v(" "),s("p",[e._v("Express 是一个简洁而灵活的轻量级 node.js Web 应用框架（详情可了解 Express），如果第一次使用，请先安装。")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("安装 Express")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i express\n复制代码\n")])])])]),e._v(" "),s("li",[s("p",[e._v("新建 index.js 文件，并写入代码")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const express = require('express');\nconst app = express();\n\n// 定义要监听的端口号\nconst listenedPort = '8087';\n\napp.get('/', (req, res) => res.send(`Hello World! I am port ${listenedPort}～`));\n\n// 监听端口\napp.listen(listenedPort, () => console.log(`success: ${listenedPort}`));\n复制代码\n")])])])]),e._v(" "),s("li",[s("p",[e._v("启动服务器")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("node index.js\n复制代码\n")])])])])]),e._v(" "),s("p",[e._v("此处可以多起几个服务，分别让 Node 监听 8087，8088，8089 端口，每个服务中通过 "),s("code",[e._v("send")]),e._v(" 不同的文案用以区分不同的 Server。")]),e._v(" "),s("p",[s("strong",[e._v("Step 3")]),e._v("：在 nginx.conf 文件中配置好需要轮询的服务器和代理")]),e._v(" "),s("ul",[s("li",[e._v("轮询的服务器，写在 http 中的 upstream 对象里：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("upstream testServer {\n  server localhost:8087 weight=10;\n  server localhost:8088 weight=2;\n  server localhost:8089;\n}\n复制代码\n")])])]),s("ul",[s("li",[e._v("代理地址，写在 http 中的 server 对象里：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("location / {\n  root   html;\n  index  index.html index.htm;\n  proxy_pass http://testServer; // testServer 为自己定义的服务器集群\n}\t\n复制代码\n")])])]),s("p",[s("strong",[e._v("Step 4")]),e._v("：查看结果")]),e._v(" "),s("ul",[s("li",[e._v("重启 Nginx 服务")]),e._v(" "),s("li",[e._v("再次打开 http://localhost:8086/")]),e._v(" "),s("li",[s("img",{attrs:{src:"Public/upload/2020-03-31/5e83586d942b7.gif",alt:"",title:"5e83586d942b7.gif"}})])]),e._v(" "),s("p",[e._v("通过多次刷新可以发现，由于设置了不同的 "),s("code",[e._v("weight")]),e._v("，端口号为 8087 的服务器出现的次数最多，同时证实了权值越高，服务器处理请求几率越大的规则 。")]),e._v(" "),s("p",[e._v("文章来源：https://juejin.im/post/5e806d84e51d4546b659b370")]),e._v(" "),s("backTop")],1)}),[],!1,null,null,null);t.default=v.exports}}]);