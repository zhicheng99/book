(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{413:function(e,t,s){"use strict";s.r(t);var n=s(10),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"可以在-nginx-中运行-javascript-厉害了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可以在-nginx-中运行-javascript-厉害了"}},[e._v("#")]),e._v(" 可以在 Nginx 中运行 JavaScript，厉害了！")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("来自：知乎，作者：whilefor")])]),e._v(" "),s("p",[s("strong",[e._v("链接：https://zhuanlan.zhihu.com/p/393788937")])])]),e._v(" "),s("p",[e._v("引言")]),e._v(" "),s("p",[e._v("Nginx 作为市场占有率最高的Web服务器，主打高性能、可扩展。自带了很多核心功能模块，并且也有大量的第三方模块。")]),e._v(" "),s("p",[e._v("Web 服务中灰度方案的实现，很多会采用 Nginx + Lua + Redis 方案。Lua 是一个轻量级的脚本语言，体积小、启动速度快、性能高。通过 lua-nginx-module 模块将 Lua 语言嵌入到 Nginx 中，可以使用 Lua 脚本扩展 Nginx 功能，并可以访问 MySQL、Redis 等数据库。")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/meG6Vo0MevhDPkBqdCWOUCVPw0MQJ2KXjnPc4G3FKxKuwTd0oY5v46Q1rC3gkCIvw8HDqjciccnlQ67UricpibxPA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),s("p",[e._v("Lua 虽然是个强大的脚本语言，但过于小众。Nginx 团队选择非常流行的 JavaScript 研发 NGINX JavaScript 模块 (njs)，让更多工程师可以使用 JavaScript 来扩展 Nginx 功能，从而更好的发展 Nginx 社区生态。")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/meG6Vo0MevhDPkBqdCWOUCVPw0MQJ2KX8IB7C5DicRMVgL7dCCcJF3ktlPqog41mgExYU5MP8St3KuUhYbZ5ADA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),s("h4",{attrs:{id:"nginx-javascript-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-javascript-简介"}},[e._v("#")]),e._v(" NGINX JavaScript 简介")]),e._v(" "),s("p",[e._v("NGINX JavaScript 简称 njs，是 JavaScript 语言的子集，实现了部分 ECMAScript 5.1(strict mode)规范和 ECMAScript 6 规范，可以使用 njs 来扩展 Nginx 功能。")]),e._v(" "),s("h5",{attrs:{id:"njs-与-node-js、javascript-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#njs-与-node-js、javascript-的区别"}},[e._v("#")]),e._v(" njs 与 Node.js、JavaScript 的区别")]),e._v(" "),s("p",[e._v("一、运行时不同")]),e._v(" "),s("p",[e._v("Node.js 使用 V8 引擎，njs 是专门为 Nginx 定制设计的运行时。Node.js 使用 V8 引擎在内存中有一个持久化的 JavaScript 虚拟机 (VM) 并执行垃圾收集以进行内存管理；而 njs 是专门为 Nginx 设计，非常轻量，会为每个请求初始化一个新的 JavaScript VM 和必要的内存，并在请求完成时释放内存。")]),e._v(" "),s("p",[e._v("二、语言规范差异")]),e._v(" "),s("p",[e._v("JavaScript 的规范是由 ECMAScript 标准定义，随着标准版本的更新迭代，会支持更多的语言功能；njs 自研的服务端运行时，更多的优先支撑服务于 Nginx，只实现了 ECMAScript 5.1 和部分 ECMAScript 6，实现更多标准规范的同时，更多会考虑是否是 Nginx 所需要的。")]),e._v(" "),s("h5",{attrs:{id:"njs-安装-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#njs-安装-配置"}},[e._v("#")]),e._v(" njs 安装&配置")]),e._v(" "),s("p",[e._v("安装 nginx-module-njs 动态模块，需要 Nginx 版本为 1.9.11 之后支持动态模块的载入。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("yum install nginx-module-njs\n")])])]),s("p",[e._v("安装后，在配置文件 nginx.conf 中需要使用 load_module 指令加载 njs 动态模块。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("load_module modules/ngx_http_js_module.so;\n")])])]),s("h4",{attrs:{id:"njs-基本使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#njs-基本使用"}},[e._v("#")]),e._v(" njs 基本使用")]),e._v(" "),s("h5",{attrs:{id:"hello-world"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hello-world"}},[e._v("#")]),e._v(" Hello World")]),e._v(" "),s("p",[e._v("nginx.conf:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("http {\n    js_import http.js;\n    # or js_import http from http.js;\n\n    server {\n        listen 8000;\n\n        location / {\n            js_content http.hello;\n        }\n    }\n}\n")])])]),s("p",[e._v("http.js:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function hello(r) {\n    r.return(200, "Hello world!");\n}\n\nexport default { hello };\n')])])]),s("p",[e._v("js_import : 导入一个 njs 模块，没有指定模块名称则默认为文件名称。")]),e._v(" "),s("p",[e._v("js_content : 使用 njs 模块里导出的方法处理这个请求。")]),e._v(" "),s("h5",{attrs:{id:"http-proxying"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-proxying"}},[e._v("#")]),e._v(" HTTP Proxying")]),e._v(" "),s("p",[e._v("使用 njs 模块处理 HTTP 请求，并使用 subrequest 发起子请求。")]),e._v(" "),s("p",[e._v("nginx.conf:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("js_import http.js;\n\nlocation /start {\n    js_content http.content;\n}\n\nlocation /foo {\n    proxy_pass <http://backend1>;\n}\n\nlocation /bar {\n    proxy_pass <http://backend2>;\n}\n")])])]),s("p",[e._v("http.js:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function content(r) {\n    r.subrequest('/api/5/foo', {\n          method: 'POST',\n          body: JSON.stringify({ foo: 'foo', bar: \"bar\" })\n    }, function(res) {\n            if (res.status != 200) {\n                r.return(res.status, res.responseBody);\n                return;\n            }\n            var json = JSON.parse(res.responseBody);\n            r.return(200, json.content);\n    });\n}\n\nexport default { content };\n")])])]),s("p",[e._v("r.subrequest : 可以去请求内部的其他 API ，headers 和该请求相同，并且可以在 location 块里使用 proxy_set_header 来设置或覆盖原来的 header。")]),e._v(" "),s("h5",{attrs:{id:"自定义日志输出格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义日志输出格式"}},[e._v("#")]),e._v(" 自定义日志输出格式")]),e._v(" "),s("p",[e._v("使用 njs 定制 Nginx 日志的输出格式。")]),e._v(" "),s("p",[e._v("nginx.js:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("js_import  logging.js;\njs_set     $access_log_headers logging.kvAccess;\nlog_format kvpairs $access_log_headers;\n\nserver {\n    listen 80;\n    root /usr/share/nginx/html;\n    access_log /var/log/nginx/access.log kvpairs;\n}\n")])])]),s("p",[e._v("logging.js:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function kvAccess(r) {\n    var log = `${r.variables.time_iso8601} client=${r.remoteAddress} method=${r.method} uri=${r.uri} status=${r.status}`;\n    r.rawHeadersIn.forEach(h => log += ` in.${h[0]}=${h[1]}`);\n    r.rawHeadersOut.forEach(h => log += ` out.${h[0]}=${h[1]}`);\n    return log;\n}\n\nexport default { kvAccess }\n")])])]),s("p",[e._v("js_set : 将 njs 模块里的 kvAccess 方法执行后，执行结果放到 $access_log_headers 变量中。但如果只被引用在 log_format 中，则只会在日志记录阶段被执行。")]),e._v(" "),s("p",[e._v("r : HTTP request 对象。属性列表：http://nginx.org/en/docs/njs/reference.html#http")]),e._v(" "),s("h5",{attrs:{id:"访问数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问数据库"}},[e._v("#")]),e._v(" 访问数据库")]),e._v(" "),s("p",[e._v("一、访问 Redis")]),e._v(" "),s("p",[e._v("使用 redis2-nginx-module 动态模块，结合 subrequest 来访问 Redis 数据。")]),e._v(" "),s("p",[e._v("nginx.conf:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("js_import http.js;\n\n# GET /redis_get?key=some_key\nlocation = /redis_get {\n     # 解码 uri 中的参数 key，赋值到变量 $key\n     set_unescape_uri $key $arg_key;\n     redis2_query get $key;\n     redis2_pass 127.0.0.1:6379;\n}\n\n# GET /redis_set?key=one&val=first%20value\nlocation = /redis_set {\n     set_unescape_uri $key $arg_key;\n     set_unescape_uri $val $arg_val;\n     redis2_query set $key $val;\n     redis2_pass 127.0.0.1:6379;\n}\n\n# GET /get_redis_data?key=some_key\nlocation /get_redis_data {\n    js_content http.get_redis_data;\n}\n")])])]),s("p",[e._v("http.js:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function serialize(obj) {\n    var str = [];\n    for (var p in obj) {\n        if (obj.hasOwnProperty(p)) {\n            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n        }\n    }\n    return str.join(\"&\");\n};\n\nfunction get_redis_data(r) {\n    r.subrequest('/redis_get', {\n          args: serialize(r.args),\n          method: 'GET'\n    }, function(res) {\n            if (res.status != 200) {\n                r.return(res.status, res.responseBody);\n                return;\n            }\n\n            r.return(200, res.responseBody);\n    });\n    return log;\n}\n\nexport default { get_redis_data }\n")])])]),s("p",[e._v("set_unescape_uri ：解码 uri 中参数的 %XX 编码。")]),e._v(" "),s("p",[e._v("redis2_query : 执行的 Redis 命令。")]),e._v(" "),s("p",[e._v("redis2_pass : Redis 后端服务。")]),e._v(" "),s("blockquote",[s("p",[e._v("redis2_pass 返回值为类似 redis-cli 执行后的返回值，需要有一个 parser 来解析是否执行成。")])]),e._v(" "),s("p",[e._v("二、访问 MySQL")]),e._v(" "),s("p",[e._v("使用 drizzle-nginx-module 动态模块，结合 subrequest 来访问 MySQL 数据。")]),e._v(" "),s("p",[e._v("nginx.conf:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('upstream backend {\n    drizzle_server 127.0.0.1:3306 dbname=test\n        password=some_pass user=monty protocol=mysql;\n}\n\nserver {\n    js_import http.js;\n\n    location /mysql {\n         set_unescape_uri $name $arg_name;\n         # 为防止 SQL 注入攻击，使用 set_quote_sql_str 来设置 sql 语句中的变量\n         set_quote_sql_str $quoted_name $name;\n\n         drizzle_query "select * from cats where name = $quoted_name";\n         drizzle_pass backend;\n\n         drizzle_connect_timeout    500ms; # default 60s\n         drizzle_send_query_timeout 2s;    # default 60s\n         drizzle_recv_cols_timeout  1s;    # default 60s\n         drizzle_recv_rows_timeout  1s;    # default 60s\n    }\n\n    # GET /get_mysql_data?name=cat_name\n    location /get_mysql_data {\n        js_content http.get_mysql_data;\n    }\n}\n')])])]),s("p",[e._v("http.js:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function serialize(obj) {\n    var str = [];\n    for (var p in obj) {\n        if (obj.hasOwnProperty(p)) {\n            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n        }\n    }\n    return str.join(\"&\");\n};\n\nfunction get_mysql_data(r) {\n    r.subrequest('/mysql', {\n          args: serialize(r.args),\n          method: 'GET'\n    }, function(res) {\n            if (res.status != 200) {\n                r.return(res.status, res.responseBody);\n                return;\n            }\n\n            r.return(200, res.responseBody);\n    });\n    return log;\n}\n\nexport default { get_mysql_data }\n")])])]),s("p",[e._v("set_quote_sql_str : 为防止 SQL 注入攻击，来设置 sql 语句中的变量。")]),e._v(" "),s("p",[e._v("drizzle_query : 执行的 SQL 语句。")]),e._v(" "),s("p",[e._v("drizzle_pass : Drizzle 或 MySQL 服务的 upstream。")]),e._v(" "),s("h4",{attrs:{id:"结语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[e._v("#")]),e._v(" 结语")]),e._v(" "),s("p",[e._v("在 njs 之前，Nginx+Lua 生态虽然已日趋成熟，但 Nginx 毕竟是一个 Web 服务器，JavaScript 作为 Web 开发的最流行的语言，可以使用 JavaScript 生态来扩展 Nginx 的功能，可能会更加的有一些想象力做更多的事情。")]),e._v(" "),s("h4",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[e._v("#")]),e._v(" 参考文献")]),e._v(" "),s("p",[e._v("2021年06月 Web 服务器排行榜 https://news.netcraft.com/archives/2021/06/29/june-2021-web-server-survey.html")]),e._v(" "),s("p",[e._v("njs scripting language https://nginx.org/en/docs/njs/")]),e._v(" "),s("p",[e._v("NJS Learning Materials https://github.com/soulteary/njs-learning-materials")]),e._v(" "),s("p",[e._v("Harnessing the Power and Convenience of JavaScript for Each Request with the\nNGINX JavaScript Module https://www.nginx.com/blog/harnessing-power-\nconvenience-of-javascript-for-each-request-with-nginx-javascript-module")]),e._v(" "),s("p",[e._v("Introducing Nginx NJS https://www.mywaiting.com/weblogs/i")]),e._v(" "),s("p",[e._v("--- EOF ---")]),e._v(" "),s("p",[s("strong",[e._v("推荐↓↓↓")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("                           ![前端开发](http://mmbiz.qpic.cn/mmbiz_png/hp6WA88JQ4STF9AEufpicoIjylicfYsBn6vLduLheUm8SicJHNiaYfm9x3v2Ribn41MpV4diabP1t7qlfibdSKbvvED8w/0?wx_fmt=png)            \n\n                   **                                前端开发                           **           专注于Web前端技术文章分享，包含JavaScript、HTML5、CSS3等前端基础知识，以及Vue.js,React,Augular等前端框架\n\n                0篇原创内容                    \n")])])]),s("p",[e._v("公众号")]),e._v(" "),s("p",[e._v("文章来源：https://mp.weixin.qq.com/s/z6OXiU4HFlY0V0ThZ_jnCw")]),e._v(" "),s("backTop")],1)}),[],!1,null,null,null);t.default=a.exports}}]);