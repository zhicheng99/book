(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{414:function(t,s,a){"use strict";a.r(s);var n=a(10),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"核心概念-一文说透-js-中的执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心概念-一文说透-js-中的执行上下文"}},[t._v("#")]),t._v(" [核心概念] 一文说透 JS 中的执行上下文")]),t._v(" "),a("h1",{attrs:{id:"执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),a("h2",{attrs:{id:"系列开篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系列开篇"}},[t._v("#")]),t._v(" 系列开篇")]),t._v(" "),a("blockquote",[a("p",[t._v("为进入前端的你建立"),a("strong",[t._v("清晰、准确、必要")]),t._v("的"),a("strong",[t._v("概念")]),t._v("和这些概念的之间"),a("strong",[t._v("清晰、准确、必要")]),t._v("的"),a("strong",[t._v("关联")]),t._v(", 让你不管在什么面试中都能淡定从容。没有目录，而是通过概念关联形成了一张知识网络，往下看你就明白了。当你遇到【关联概念】时，可先从括号中的(强/弱)判断简单这个关联是对你正在理解的概念是强相关(得先理解你才能继续往下)还是弱相关(知识拓展)从而提高你的阅读效率。我也会定期更新相关关联概念。")])]),t._v(" "),a("h3",{attrs:{id:"面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[t._v("#")]),t._v(" 面试题")]),t._v(" "),a("ul",[a("li",[t._v("什么是执行上下文？")]),t._v(" "),a("li",[t._v("当 JS 引擎处理一段脚本内容的时候，它是以怎样的顺序解析和执行的？")]),t._v(" "),a("li",[t._v("与之相关的词法环境，this 指向，全局执行上下文，变量对象等都是些啥？")])]),t._v(" "),a("h1",{attrs:{id:"这是干什么的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#这是干什么的"}},[t._v("#")]),t._v(" 这是干什么的？")]),t._v(" "),a("p",[t._v('当引擎解析到可执行代码时，会创建对应的 "'),a("strong",[t._v("执行上下文")]),t._v('(execution context 简称 EC)" 或者也可以叫做'),a("strong",[t._v("执行环境")]),t._v("。它是代码"),a("strong",[t._v("执行环境")]),t._v("的抽象概念。")]),t._v(" "),a("h2",{attrs:{id:"和作用域的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和作用域的区别"}},[t._v("#")]),t._v(" 和作用域的区别")]),t._v(" "),a("p",[t._v("和 作用域【关联概念(强)】听上去有点像，但不要搞混，是不同概念。")]),t._v(" "),a("p",[t._v("最大区别简单来说，之前提到的"),a("strong",[t._v("词法作用域")]),t._v("规则是在代码"),a("strong",[t._v("定义时")]),t._v("就确定了，无可改变。")]),t._v(" "),a("p",[t._v("而执行上下文是在代码"),a("strong",[t._v("执行时可以改变")]),t._v("的环境。")]),t._v(" "),a("p",[t._v("比如你定义了一个函数，它的"),a("strong",[t._v("作用域")]),t._v("在"),a("strong",[t._v("函数定义时")]),t._v("就已经确定了，但是"),a("strong",[t._v("执行上下文")]),t._v("是"),a("strong",[t._v("函数调用之前")]),t._v("创建的。")]),t._v(" "),a("h2",{attrs:{id:"执行上下文栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文栈"}},[t._v("#")]),t._v(" 执行上下文栈")]),t._v(" "),a("p",[t._v("我们每调用一个函数，就会创建一个新的执行上下文，那么如何管理如此复杂的调用创建的执行上下文呢？")]),t._v(" "),a("p",[t._v("这就有了"),a("strong",[t._v("执行上下文栈")]),t._v("，或者叫"),a("strong",[t._v("调用栈")]),t._v("，"),a("strong",[t._v("执行栈")]),t._v("，execution context stack，ECS都行。这个概念听着耳熟，聊 this 时是不是经常听到，分析 this 指向就分析调用栈，后面细说。")]),t._v(" "),a("p",[t._v("栈【数据结构】, 具有 LIFO（后进先出）结构。我们用它来存储在代码执行期间创建的所有执行上下文。")]),t._v(" "),a("h3",{attrs:{id:"全局执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局执行上下文"}},[t._v("#")]),t._v(" 全局执行上下文")]),t._v(" "),a("p",[t._v("首先我们介绍下一个特殊的执行上下文，"),a("strong",[t._v("全局执行上下文")]),t._v("，一个程序中"),a("strong",[t._v("只会存在一个唯一的")]),t._v("全局上下文。")]),t._v(" "),a("p",[t._v("当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以首先就会向执行上下文栈压入一个全局执行上下文，它在整个程序生命周期内都会存在于执行栈的"),a("strong",[t._v("最底部")]),t._v("，除非整个应用程序结束，栈才会被清空。")]),t._v(" "),a("h3",{attrs:{id:"函数执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数执行上下文"}},[t._v("#")]),t._v(" 函数执行上下文")]),t._v(" "),a("p",[t._v("我们每调用一个函数，就会创建一个新的执行上下文。一般我们所讨论的都是函数执行上下文。")]),t._v(" "),a("h3",{attrs:{id:"模拟过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟过程"}},[t._v("#")]),t._v(" 模拟过程")]),t._v(" "),a("p",[t._v("我们简易来模拟下，定义一个数组 "),a("code",[t._v("ExecutionContextStack = []")]),t._v("代表执行上下文栈。")]),t._v(" "),a("p",[t._v("首先是全局执行上下文入栈。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局执行上下文 globalContext 表示")]),t._v("\nExecutionContextStack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    globalContext\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n复制代码\n")])])]),a("p",[t._v("然后执行到这段代码")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'k'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("outer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("outer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n复制代码\n")])])]),a("p",[t._v("那么大概模拟过程的伪代码应该是")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数执行上下文 functionContext 表示")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用outer();")]),t._v("\nExecutionContextStack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" functionContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// outer中调用了inner，还要创建inner函数的执行上下文")]),t._v("\nExecutionContextStack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("inner"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" functionContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// inner执行完毕")]),t._v("\nExecutionContextStack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// outer执行完毕")]),t._v("\nExecutionContextStack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// javascript接着执行下面的代码，为新的函数创建新的执行上下文")]),t._v("\n复制代码\n")])])]),a("p",[t._v("大概流程图示")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("全局执行上下文入栈    outer函数上下文入栈          inner函数上下文入栈 \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("inner functionContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("outer functionContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("outer functionContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("globalContext"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     globalContext    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    globalContext     "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n\n   inner执行完出栈            outer执行完毕出栈 \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   继续执行下面的代码，但是栈底永\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" outer functionContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 远有个globalContext直到整\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    globalContext      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" globalContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     个应用程序结束执行，栈置空\n复制代码\n")])])]),a("h2",{attrs:{id:"执行上下文的创建过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的创建过程"}},[t._v("#")]),t._v(" 执行上下文的创建过程")]),t._v(" "),a("p",[t._v("为什么要了解创建过程，实际上就是在"),a("strong",[t._v("分解执行上下文的结构")])]),t._v(" "),a("p",[t._v("大概分为这几部分")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("确定 "),a("strong",[t._v("this")]),t._v(" 如何绑定")]),t._v(" (This Binding)")]),t._v(" "),a("li",[a("strong",[t._v("词法环境")]),t._v(" (Lexical Environment)")]),t._v(" "),a("li",[a("strong",[t._v("变量环境")]),t._v(" (Variable Environment)\n看上去长这样")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行上下文概念伪代码")]),t._v("\nExecutionContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ThisBinding "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  LexicalEnvironment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  VariableEnvironment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n复制代码\n")])])]),a("h3",{attrs:{id:"this-binding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-binding"}},[t._v("#")]),t._v(" This Binding")]),t._v(" "),a("p",[t._v("简单来说，在"),a("strong",[t._v("全局执行上下文中")]),t._v("，this 的值指向"),a("strong",[t._v("全局对象")]),t._v("【关联概念(强)】")]),t._v(" "),a("p",[a("strong",[t._v("在函数执行上下文中")]),t._v("，this 的值取决于函数的"),a("strong",[t._v("调用方式")]),t._v("，在此不细说。请看 this【关联概念(强)】概念专题。")]),t._v(" "),a("h3",{attrs:{id:"词法环境-lexical-environment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词法环境-lexical-environment"}},[t._v("#")]),t._v(" 词法环境 Lexical Environment")]),t._v(" "),a("p",[t._v("在 JavaScript 中，每个运行的函数，代码块 {...} 以及整个脚本，都有一个被称为 词法环境（Lexical Environment）的内部（隐藏）的关联对象。")]),t._v(" "),a("p",[t._v("这是一个"),a("strong",[t._v("规范对象（specification object）")]),t._v("：它仅仅是存在于 编程语言规范中的“理论上”存在的，用于描述事物如何运作的对象。我们"),a("strong",[t._v("无法在代码中获取该对象并直接对其进行操作")]),t._v("。")]),t._v(" "),a("p",[t._v("词法环境对象由两部分组成：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("环境记录")]),t._v("（Environment Record）—— 一个存储所有局部变量作为其属性（包括一些其他信息，例如 this 的值）的对象。")]),t._v(" "),a("li",[a("strong",[t._v("对外部词法环境的引用")]),t._v("，与外部代码相关联(可以访问外部的词法环境)。")])]),t._v(" "),a("p",[t._v("所以 "),a("strong",[t._v("一个“变量")]),t._v("”只是"),a("strong",[t._v("环境记录")]),t._v("这个特殊的内部对象的"),a("strong",[t._v("一个属性")]),t._v("。“获取或修改变量”意味着“获取或修改词法环境的一个属性”。")]),t._v(" "),a("h4",{attrs:{id:"举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),a("p",[t._v("下面的例子来源于现代 JavaScript 教程 文末有链接，非常清晰。")]),t._v(" "),a("p",[t._v("这段没有函数的简单的代码中只有一个词法环境：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/854f9ce887514d9fa7a0cec9e8ef796d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:""}})]),t._v(" "),a("p",[t._v("这就是所谓的与整个脚本相关联的 "),a("strong",[t._v("全局词法环境")]),t._v("。")]),t._v(" "),a("p",[t._v("在上面的图片中，矩形表示"),a("strong",[t._v("环境记录")]),t._v("（变量存储），箭头表示"),a("strong",[t._v("外部引用")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("全局词法环境没有外部引用")]),t._v("，所以箭头指向了 "),a("strong",[t._v("null")]),t._v("。")]),t._v(" "),a("p",[t._v("随着代码开始并继续运行，词法环境发生了变化。这是更长的代码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70b24c1324994519afb3480c9b25ab8f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:""}})]),t._v(" "),a("p",[t._v("右侧的矩形演示了执行过程中全局词法环境的变化：")]),t._v(" "),a("ul",[a("li",[t._v("当脚本开始运行，词法环境"),a("strong",[t._v("预先填充")]),t._v("了"),a("strong",[t._v("所有声明的变量")]),t._v("。\n"),a("ul",[a("li",[t._v("最初，它们处于“未初始化（"),a("strong",[t._v("Uninitialized")]),t._v("）”状态。这是一种特殊的内部状态，这意味着引擎知道变量，但是在用 let 声明前，不能引用它。几乎就像变量不存在一样。")])])]),t._v(" "),a("li",[t._v("然后 let phrase 定义出现了。它尚未被赋值，因此它的值为 undefined。从这一刻起，我们就可以使用变量了。")]),t._v(" "),a("li",[t._v("phrase 被赋予了一个值。")]),t._v(" "),a("li",[t._v("phrase 的值被修改。")])]),t._v(" "),a("p",[t._v("然后我们再来看看"),a("strong",[t._v("函数声明")])]),t._v(" "),a("p",[t._v("一个函数其实也是一个值，就像变量一样。")]),t._v(" "),a("p",[a("strong",[t._v("不同之处在于函数声明的初始化会被立即完成。")]),t._v(" 有没有印象，这就是"),a("strong",[t._v("变量提升")]),t._v(" -> "),a("strong",[t._v("函数优先")]),t._v("的原理【关联子概念】")]),t._v(" "),a("p",[t._v("当创建了一个词法环境（Lexical Environment）时，函数声明会立即变为"),a("strong",[t._v("即用型函数")]),t._v("（不像 let 那样直到声明处才可用）。")]),t._v(" "),a("p",[t._v("这就是为什么我们可以在（函数声明）的定义之前调用函数声明。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1dd17082d03424aac3f3fe6fabc890c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:""}})]),t._v(" "),a("p",[t._v("但这种行为"),a("strong",[t._v("仅适用于函数声明")]),t._v("，而"),a("strong",[t._v("不适用")]),t._v("于我们将函数分配给变量的"),a("strong",[t._v("函数表达式")]),t._v("，例如 let say = function(name) {...}")]),t._v(" "),a("p",[t._v("我们再来看看"),a("strong",[t._v("内部")]),t._v("词法环境和"),a("strong",[t._v("外部")]),t._v("词法环境的关联")]),t._v(" "),a("p",[t._v("首先有内部，说明有函数执行，在全局或函数内部的词法环境中又创建了内部的函数环境，说作用域会不会更清楚，其实这边要讲的就是"),a("strong",[t._v("作用域链的原理")]),t._v("。")]),t._v(" "),a("p",[t._v("在一个函数运行时，在调用刚开始时，会自动创建一个新的词法环境以存储这个调用的局部变量和参数。")]),t._v(" "),a("p",[t._v('例如，对于 say("John")，它看起来像这样（当前执行位置在箭头标记的那一行上）：')]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6ae32d4269e46e696661f67b728ec27~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:""}})]),t._v(" "),a("p",[t._v("在这个函数调用期间，我们有两个词法环境：内部一个（用于函数调用）和外部一个（全局）：")]),t._v(" "),a("ul",[a("li",[t._v("内部词法环境与"),a("code",[t._v("say")]),t._v(" 的当前执行相对应。它具有一个单独的属性："),a("code",[t._v("name")]),t._v("，函数的参数。我们调用的是"),a("code",[t._v('say("John")')]),t._v("，所以"),a("code",[t._v("name")]),t._v(" 的值为"),a("code",[t._v('"John"')]),t._v("。")]),t._v(" "),a("li",[t._v("外部词法环境是全局词法环境。它具有"),a("code",[t._v("phrase")]),t._v(" 变量和函数本身。")])]),t._v(" "),a("p",[t._v("内部词法环境引用了 outer。")]),t._v(" "),a("p",[a("strong",[t._v("当代码要访问一个变量时 —— 首先会搜索内部词法环境，然后搜索外部环境，然后搜索更外部的环境，以此类推，直到全局词法环境。")])]),t._v(" "),a("p",[t._v("如果在任何地方都找不到这个变量，那么在严格模式下就会报错（在非严格模式下，为了向下兼容，给未定义的变量赋值会创建一个全局变量）。")]),t._v(" "),a("p",[t._v("在这个示例中，搜索过程如下：")]),t._v(" "),a("ul",[a("li",[t._v("对于"),a("code",[t._v("name")]),t._v(" 变量，当"),a("code",[t._v("say")]),t._v(" 中的"),a("code",[t._v("alert")]),t._v(" 试图访问"),a("code",[t._v("name")]),t._v(" 时，会立即在"),a("strong",[t._v("内部词法环境中")]),t._v("找到它。")]),t._v(" "),a("li",[t._v("当它试图访问"),a("code",[t._v("phrase")]),t._v(" 时，然而内部没有"),a("code",[t._v("phrase")]),t._v("，所以它顺着对"),a("strong",[t._v("外部词法环境的引用")]),t._v("找到了它。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8c43779d98346c0ade0df6cd0ff9d56~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:""}})]),t._v(" "),a("p",[t._v("是不是此时你清楚的明白了"),a("strong",[t._v("作用域链")]),t._v("【关联概念(强)】到底是怎么形成的，为什么内部作用域可访问外部变量之类的问题都迎刃而解了。")]),t._v(" "),a("p",[t._v("看这个例子, 当函数返回值是函数时:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" counter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n复制代码\n")])])]),a("p",[t._v("在每次 makeCounter() 调用的开始，都会创建一个新的词法环境对象，以存储该 makeCounter 运行时的变量。\n因此，我们有两层嵌套的词法环境，就像上面的示例一样：(注意现在只运行到红三角那)\n"),a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55b0c8fb55934078babb4f203347c2e6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:""}})]),t._v(" "),a("p",[t._v("不同的是，在执行 makeCounter() 的过程中创建了一个仅占一行的嵌套函数："),a("code",[t._v("return count++")]),t._v("。我们尚未运行它，"),a("strong",[t._v("仅创建")]),t._v("了它。")]),t._v(" "),a("p",[t._v("所有的函数在“诞生”时都会“记住”创建它们的词法环境。从技术上讲，这里没有什么魔法："),a("strong",[t._v("所有函数")]),t._v("都有名为 "),a("strong",[t._v("[[Environment]]")]),t._v(" 的"),a("strong",[t._v("隐藏属性")]),t._v("，该属性"),a("strong",[t._v("保存了对创建该函数的词法环境的引用")]),t._v("。\n"),a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5a10f9e42d547f1b30dfa73d59c75aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:""}})]),t._v(" "),a("p",[t._v("因此，"),a("code",[t._v("counter.[[Environment]]")]),t._v(" 有对 "),a("code",[t._v("{count: 0}")]),t._v(" "),a("strong",[t._v("词法环境的引用")]),t._v("。这就是函数记住它创建于何处的方式，与函数被在哪儿调用无关。"),a("strong",[t._v("[[Environment]] 引用在函数创建时被设置并永久保存")]),t._v("。")]),t._v(" "),a("p",[t._v("稍后，当调用 "),a("code",[t._v("counter()")]),t._v(" 时，会为该调用创建一个新的词法环境，并且其外部词法环境引用获取于 "),a("code",[t._v("counter.[[Environment]]")]),t._v("：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b5e16f6f71e4fc4b5e3270c341bae3e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:""}})]),t._v(" "),a("p",[t._v("现在，当 "),a("code",[t._v("counter()")]),t._v(" 中的代码查找 "),a("code",[t._v("count")]),t._v(" 变量时，它首先搜索自己的词法环境（为空，因为那里没有局部变量），然后是外部 "),a("code",[t._v("makeCounter()")]),t._v(" 的词法环境，并且在哪里找到就在哪里修改。")]),t._v(" "),a("p",[a("strong",[t._v("在变量所在的词法环境中更新变量。")]),t._v(" 所以直接在 makeCounter 的词法环境中改变 count变量的值。")]),t._v(" "),a("p",[t._v("这是执行后的状态：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08a2bd091a44471e8b9958b5baa366a9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:""}})]),t._v(" "),a("p",[t._v("如果我们调用 "),a("code",[t._v("counter() 多次")]),t._v("，count 变量将在"),a("strong",[t._v("同一位置")]),t._v("增加到 2，3 等。因为我们查到的都是 "),a("code",[t._v("makeCounter()")]),t._v(" 的词法环境"),a("strong",[t._v("这个引用被永久设置了，所以都是同一份")]),t._v("。这就是闭包数据持久化的原理。")]),t._v(" "),a("p",[t._v("JavaScript 中的函数会自动通过隐藏的 "),a("strong",[t._v("[[Environment]]")]),t._v(" 属性记住创建它们的位置，所以它们都可以访问外部变量。")]),t._v(" "),a("p",[t._v("在面试时，前端开发者通常会被问到“什么是闭包？”，正确的回答应该是"),a("strong",[t._v("闭包的定义")]),t._v("，并解释清楚为什么 JavaScript 中的所有函数都是闭包的，以及可能的关于 [[Environment]] 属性和词法环境原理的技术细节。")]),t._v(" "),a("p",[t._v("关于闭包【关联概念】,点进去。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("看完上面的讲述，希望你会对作用域链，声明提升，闭包等概念有了更深层的认识!")])])]),t._v(" "),a("h3",{attrs:{id:"变量环境-variable-environment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量环境-variable-environment"}},[t._v("#")]),t._v(" 变量环境 Variable Environment")]),t._v(" "),a("p",[t._v("变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。")]),t._v(" "),a("p",[t._v("在 ES6 中，LexicalEnvironment 组件和 VariableEnvironment 组件的区别在于前者用于存储函数声明和变量（ "),a("code",[t._v("let")]),t._v(" 和 "),a("code",[t._v("const")]),t._v(" ）绑定，而后者仅用于存储变量（ "),a("code",[t._v("var")]),t._v(" ）绑定。")]),t._v(" "),a("p",[t._v("就不提 "),a("code",[t._v("var")]),t._v(" 太多了，希望用好能生成块级作用域的 "),a("code",[t._v("let")]),t._v(" / "),a("code",[t._v("const")])]),t._v(" "),a("h1",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("执行上下文"),a("strong",[t._v("创建过程")]),t._v("是 JavaScript代码被解析和执行时准备运行环境的过程，执行上下文是代码"),a("strong",[t._v("执行环境")]),t._v("的抽象概念。")]),t._v(" "),a("h1",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("h3",{attrs:{id:"解释型-or-编译型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释型-or-编译型"}},[t._v("#")]),t._v(" 解释型 OR 编译型")]),t._v(" "),a("p",[t._v('我们通常把 Javascript 归类位"动态"，"解释执行" 语言，事实上他是一门混合型语言(和传统编译有区别，不是提前编译，而且编译结果也不能在分布式系统中移植)，传统编译流程中，程序在执行一段源码前会经历3个步骤统称为 \'编译\'')]),t._v(" "),a("ul",[a("li",[t._v("分词/词法分析\n"),a("ul",[a("li",[t._v("这个过程会将由字符组成的字符串分解成（对编程语言来说）有意义的代码块，这些代 码块被称为词法单元。")])])]),t._v(" "),a("li",[t._v("解析/语法分析\n"),a("ul",[a("li",[t._v("这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法 结构的树。这个树被称为“抽象语法树”（Abstract Syntax Tree，AST）【关联概念】。")])])]),t._v(" "),a("li",[t._v("优化/代码生成\n"),a("ul",[a("li",[t._v("将 AST 转换为可执行代码的过程称被称为代码生成")])])])]),t._v(" "),a("h3",{attrs:{id:"变量对象-vo、活动对象-ao"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量对象-vo、活动对象-ao"}},[t._v("#")]),t._v(" 变量对象 VO、活动对象 AO")]),t._v(" "),a("p",[t._v("这些是ES3中的历史说法 有兴趣可以寻找相关材料")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[t._v("You don't know javascript")]),t._v(" "),a("li",[t._v("zh.javascript.info/closure")]),t._v(" "),a("li",[t._v("juejin.cn/post/684490…")]),t._v(" "),a("li",[t._v("github.com/mqyqingfeng…")]),t._v(" "),a("li",[t._v("segmentfault.com/a/119000001…")]),t._v(" "),a("li",[t._v("juejin.cn/post/684490…")])]),t._v(" "),a("p",[t._v(".markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}\n文章来源：https://juejin.cn/post/6890705692643196935")]),t._v(" "),a("backTop")],1)}),[],!1,null,null,null);s.default=r.exports}}]);