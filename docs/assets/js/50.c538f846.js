(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{334:function(e,n,s){"use strict";s.r(n);var t=s(10),r=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"多个promise实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多个promise实现"}},[this._v("#")]),this._v(" 多个promise实现")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("var f1 =  new Promise((resolve, reject)=>{\n\n        setTimeout(()=>{\n            console.log('f1 finished');\n            resolve({\n                text:'f1 promise'\n            })\n        },2000)\n\n    })\nvar f2 =  new Promise((resolve,reject)=>{\n\n        setTimeout(()=>{\n            console.log('f2 finished')\n            resolve({\n                text:'f2 promise'\n            })\n\n        },2000)\n    })\n\n//并行执行\nPromise.all([f1,f2]).then(()=>{ \n    console.log('callback')\n})\n\n\nvar a = _=>{\n    return new Promise((resolve,reject)=>{\n        setTimeout(_=>{\n            console.log('aa');\n            reject('fail')\n            // resolve('a->ok')\n        },2000)\n    })\n}\nvar b = _=>{\n    return new Promise((resolve,reject)=>{\n        setTimeout(_=>{\n            console.log('bb');\n\n            resolve('b->ok')\n        },1000)\n    })\n}\n// 串行执行promise 构建队列\nfunction queue(arr) {\n    var res=[];\n    var sequence = Promise.resolve();\n    arr.forEach(function (item) {\n        sequence = sequence.then(item).then(data=>{\n                console.log(data);\n                res.push(data);\n                return res\n       }).catch(data=>{\n           //有reject也返回\n           res.push(data);\n           return res;\n       })\n    })\n\n    return sequence\n}\nqueue([a,b]).then(res=>{\n    console.log(res);\n})\n\n\n")])])]),n("backTop")],1)}),[],!1,null,null,null);n.default=r.exports}}]);