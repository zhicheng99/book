(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{399:function(t,s,a){"use strict";a.r(s);var n=a(10),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"核心概念-一文说透-js-的作用域-scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心概念-一文说透-js-的作用域-scope"}},[t._v("#")]),t._v(" [核心概念] 一文说透 JS 的作用域（scope）")]),t._v(" "),a("h1",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("h2",{attrs:{id:"系列开篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系列开篇"}},[t._v("#")]),t._v(" 系列开篇")]),t._v(" "),a("blockquote",[a("p",[t._v("为进入前端的你建立"),a("strong",[t._v("清晰、准确、必要")]),t._v("的"),a("strong",[t._v("概念")]),t._v("和这些概念的之间"),a("strong",[t._v("清晰、准确、必要")]),t._v("的"),a("strong",[t._v("关联")]),t._v(", 让你不管在什么面试中都能淡定从容。没有目录，而是通过概念关联形成了一张知识网络，往下看你就明白了。当你遇到【关联概念】时，可先从括号中的(强/弱)判断简单这个关联是对你正在理解的概念是强相关(得先理解你才能继续往下)还是弱相关(知识拓展)从而提高你的阅读效率。我也会定期更新相关关联概念。")])]),t._v(" "),a("h3",{attrs:{id:"面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[t._v("#")]),t._v(" 面试题")]),t._v(" "),a("ul",[a("li",[t._v("用你自己话说说什么是作用域")]),t._v(" "),a("li",[t._v("词法作用域，静态作用域，动态作用域，函数作用域，块级作用域等等分别都是啥意思")])]),t._v(" "),a("h1",{attrs:{id:"这是干什么的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#这是干什么的"}},[t._v("#")]),t._v(" 这是干什么的？")]),t._v(" "),a("p",[t._v("作用域是"),a("strong",[t._v("一套规则")]),t._v("，它规定了"),a("strong",[t._v("如何查找变量")]),t._v("，也就是"),a("strong",[t._v("确定当前执行代码对变量的访问权限")]),t._v("。")]),t._v(" "),a("p",[t._v("简单来说，我们在写代码时，就已经把代码分隔成一个个代码块(区域)，在这些代码块中定义许多变量，而作用域就规定哪些代码块能访问哪些变量。")]),t._v(" "),a("p",[t._v("这些变量的访问权限是在你代码写出来就已经确定的了，不能改了，是静态的了，所以也称为"),a("strong",[t._v("静态作用域")]),t._v("，或 "),a("strong",[t._v("词法作用域(lexical scoping)")]),t._v("。")]),t._v(" "),a("p",[t._v("如果一个变量或者其他表达式不在当前的作用域中，那么它就是不可用的。")]),t._v(" "),a("h3",{attrs:{id:"作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),a("p",[t._v("你在写代码时肯定不会是流水账，必然有嵌套的情况出现吧。作用域此时就发生了嵌套，具有了层次。")]),t._v(" "),a("p",[t._v("子作用域可以访问父作用域，反之则不行，这就是作用域链的规矩。")]),t._v(" "),a("p",[t._v("我们在程序中要使用声明的变量时，引擎总会从"),a("strong",[t._v("最近的一个域")]),t._v("先找，没有则向上层逐次地查找，直到找到"),a("strong",[t._v("最外层全局作用域")]),t._v("中。")]),t._v(" "),a("p",[t._v("想象儿子可以跟父亲或者爷爷要东西(外部作用域变量)，长辈不好跟小孩要糖(内部作用域变量)")]),t._v(" "),a("p",[t._v("现在我们大概了解了作用域是什么，下面更细至地分析下。")]),t._v(" "),a("h2",{attrs:{id:"词法作用域-静态作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域-静态作用域"}},[t._v("#")]),t._v(" 词法作用域(静态作用域)")]),t._v(" "),a("h3",{attrs:{id:"词法作用域就是定义在词法阶段的作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域就是定义在词法阶段的作用域"}},[t._v("#")]),t._v(" 词法作用域就是定义在词法阶段的作用域")]),t._v(" "),a("p",[t._v("换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，")]),t._v(" "),a("p",[t._v("因此当词法分析器处理代码时会保持作用域不变(大部分情况下是这样的，除了欺骗词法的几个方法)。")]),t._v(" "),a("p",[t._v("因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。")]),t._v(" "),a("h3",{attrs:{id:"遮蔽效应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遮蔽效应"}},[t._v("#")]),t._v(" 遮蔽效应")]),t._v(" "),a("p",[t._v("作用域查找会在找到第一个匹配的标识符时停止。")]),t._v(" "),a("p",[t._v("在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”(内部的标识符“遮蔽”了外部的标识符)。")]),t._v(" "),a("p",[t._v("抛开遮蔽效应，作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作用域链示意")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'global'")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局作用域变量")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" innerValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inner'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'遮蔽了全局的同名变量'")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遮蔽了全局的同名变量  [先从最近的域开始找，找不到再往外]")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("innerValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// inner")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// golbal [先从最近的作用域找，看上去直接是全局作用域]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("innerValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError: innerValue is not defined [外不访内]")]),t._v("\n复制代码\n")])])]),a("p",[t._v("那如果这样呢")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作用域链示意")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'global'")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局作用域变量")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// golbal [不管这个函数在哪被调用，看他定义时(声明)的作用域]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo 内部的变量'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虽然bar在foo 内部调用，但是根据词法作用域要看定义时bar的作用域")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n复制代码\n")])])]),a("h4",{attrs:{id:"关键看定义-函数声明-时的作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键看定义-函数声明-时的作用域"}},[t._v("#")]),t._v(" 关键看定义(函数声明)时的作用域")]),t._v(" "),a("h3",{attrs:{id:"欺骗词法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#欺骗词法"}},[t._v("#")]),t._v(" 欺骗词法")]),t._v(" "),a("ul",[a("li",[t._v("eval")]),t._v(" "),a("li",[t._v("with\n这两个机制的副作用是引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认为这样的优化是无效的。使用这其中任何一个机制都将导致代码运行变慢。"),a("strong",[t._v("不要使用它们")]),t._v("。想了解去 MDN 查查看。")])]),t._v(" "),a("h2",{attrs:{id:"动态作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态作用域"}},[t._v("#")]),t._v(" 动态作用域")]),t._v(" "),a("p",[t._v("为了不让你搞混，首先下一个结论。")]),t._v(" "),a("h4",{attrs:{id:"javascript-并不具有动态作用域。它只有词法作用域-简单明了。-但是-this-机制某种程度上很像动态作用域。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-并不具有动态作用域。它只有词法作用域-简单明了。-但是-this-机制某种程度上很像动态作用域。"}},[t._v("#")]),t._v(" JavaScript 并不具有动态作用域。它只有词法作用域，简单明了。 但是 this 机制某种程度上很像动态作用域。")]),t._v(" "),a("p",[t._v("主要区别：词法作用域是在写代码或者说"),a("strong",[t._v("定义时确定")]),t._v("的，而动态作用域是在"),a("strong",[t._v("运行时确定")]),t._v("的。("),a("strong",[t._v("this 也是")]),t._v("!)")]),t._v(" "),a("p",[a("strong",[t._v("词法作用域")]),t._v("关注函数在 "),a("strong",[t._v("何处声明")]),t._v("，而"),a("strong",[t._v("动态作用域")]),t._v("关注函数从"),a("strong",[t._v("何处调用")]),t._v("。")]),t._v(" "),a("p",[t._v("所以分析 this 指向时，分析的是"),a("strong",[t._v("函数调用栈")]),t._v(",这个在关联概念 "),a("strong",[t._v("this")]),t._v(" 【关联概念(弱)】中详细说。")]),t._v(" "),a("p",[t._v("Bash/Perl等语言使用动态作用域。")]),t._v(" "),a("h2",{attrs:{id:"函数作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域"}},[t._v("#")]),t._v(" 函数作用域")]),t._v(" "),a("p",[t._v("顾名思义，函数作用域的含义是指，属于这个函数的"),a("strong",[t._v("全部变量")]),t._v("都可以在"),a("strong",[t._v("整个函数的范围内使用及复用")]),t._v("(事实上在嵌套的作用域中也可以使用)。")]),t._v(" "),a("h2",{attrs:{id:"块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域"}},[t._v("#")]),t._v(" 块级作用域")]),t._v(" "),a("p",[t._v("简单来说，块级作用域就是包含在语法 "),a("strong",[t._v("{ }")]),t._v(" 中的作用域。")]),t._v(" "),a("ul",[a("li",[t._v("try/catch")]),t._v(" "),a("li",[t._v("let / const")])]),t._v(" "),a("p",[t._v("在 ES6 中引入了 let 关键字 (var 关键字的表亲)，用来在任意代码块中声明变量。")]),t._v(" "),a("p",[a("code",[t._v("if (..) { let a = 2; }")]),t._v(" 会声明一个劫持了 if 的 { .. } 块的变量，并且将变量添加到这个块中。")]),t._v(" "),a("p",[t._v("简单来说就是let 没有"),a("strong",[t._v("变量提升")]),t._v("【关联概念】这回事。")]),t._v(" "),a("p",[t._v("从块顶部到该变量的初始化语句，这块区域叫做 TDZ（临时死区）。")]),t._v(" "),a("p",[t._v("再明白点就是你不声明就不能用，用了就报错。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//`*************** 临时死区 ***************`")]),t._v("\n   console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//`*************** 临时死区 ***************`")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n首先会因为变量提升打出 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" 然后因为在临时死区内使用"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" 定义的变量抛出错误。\n复制代码\n")])])]),a("h1",{attrs:{id:"实现原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理是什么"}},[t._v("#")]),t._v(" 实现原理是什么？")]),t._v(" "),a("blockquote",[a("p",[t._v("我们深刻理解了这个概念之后，可以探究下它的实现(面试也经常问到这方面源码)，可能有人觉得没啥用，我觉得它的用处是拓展出其他相关联的【必知】概念，也可以看看你的硬编码能力，再不济看看你的记忆力如何也是好的。(^-^)")])]),t._v(" "),a("p",[t._v("在词法环境"),a("strong",[t._v("执行上下文")]),t._v(" -> "),a("strong",[t._v("词法环境")]),t._v("【关联子概念(强)】内外部的关联，其实就是作用域链原理，其实这里我们可以理解执行上下文中的词法环境就是这里通称的作用域。因为就是它确"),a("strong",[t._v("定了当前执行代码对变量的访问权限。")])]),t._v(" "),a("h1",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[t._v("You don't know Javascript")]),t._v(" "),a("li",[t._v("developer.mozilla.org/zh-CN/docs/…")]),t._v(" "),a("li",[t._v("developer.mozilla.org/zh-CN/docs/…")])]),t._v(" "),a("p",[t._v(".markdown-body pre,.markdown-body pre>code.hljs{color:#333;background:#f8f8f8}.hljs-comment,.hljs-quote{color:#998;font-style:italic}.hljs-keyword,.hljs-selector-tag,.hljs-subst{color:#333;font-weight:700}.hljs-literal,.hljs-number,.hljs-tag .hljs-attr,.hljs-template-variable,.hljs-variable{color:teal}.hljs-doctag,.hljs-string{color:#d14}.hljs-section,.hljs-selector-id,.hljs-title{color:#900;font-weight:700}.hljs-subst{font-weight:400}.hljs-class .hljs-title,.hljs-type{color:#458;font-weight:700}.hljs-attribute,.hljs-name,.hljs-tag{color:navy;font-weight:400}.hljs-link,.hljs-regexp{color:#009926}.hljs-bullet,.hljs-symbol{color:#990073}.hljs-built_in,.hljs-builtin-name{color:#0086b3}.hljs-meta{color:#999;font-weight:700}.hljs-deletion{background:#fdd}.hljs-addition{background:#dfd}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}\n文章来源：https://juejin.cn/post/6889538437783748621")]),t._v(" "),a("backTop")],1)}),[],!1,null,null,null);s.default=r.exports}}]);