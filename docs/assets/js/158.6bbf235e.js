(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{424:function(a,r,t){"use strict";t.r(r);var e=t(10),n=Object(e.a)({},(function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"javascript对象之深拷贝和浅拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript对象之深拷贝和浅拷贝"}},[a._v("#")]),a._v(" JavaScript对象之深拷贝和浅拷贝")]),a._v(" "),t("p",[a._v("最开始意识到深拷贝的重要性是在我对对象进行合并的时候。例如：")]),a._v(" "),t("div",{staticClass:"language-guage-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var fruit = {\n    apple: {\n        count: '10',\n        price: '20'\n    },\n    banna: {\n        count: '5',\n        price: '15'\n    },\n    durian: '100'\n}\nvar fruit1 = {\n    apple: {\n        price: '100'\n    }\n}\nObject.assign(fruit, fruit1) \n")])])]),t("p",[a._v("我期望的值")]),a._v(" "),t("p",[t("img",{attrs:{src:"Public/upload/2020-04-30/5eaa98e17d768.jpeg",alt:"5eaa98e17d768.jpeg"}})]),a._v(" "),t("p",[a._v("实际获取的值")]),a._v(" "),t("p",[t("img",{attrs:{src:"Public/upload/2020-04-30/5eaa9916e118a.jpeg",alt:"5eaa9916e118a.jpeg"}})]),a._v(" "),t("p",[a._v("这，就是我和深浅拷贝的第一次相遇。如果你对拷贝原理理解的不透彻，此文或许能提供一点帮助。")]),a._v(" "),t("h1",{attrs:{id:"javascript数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript数据类型"}},[a._v("#")]),a._v(" javascript数据类型")]),a._v(" "),t("h2",{attrs:{id:"基本数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[a._v("#")]),a._v(" 基本数据类型")]),a._v(" "),t("p",[a._v("string、number、null、undefined、boolean、symbol（"),t("em",[a._v("ES6 新增的原始数据类型，表示独一无二的值")]),a._v("）变量值存放在栈内存中，可直接访问和修改变量的值。基本数据类型不存在拷贝，例如：你无法修改数值1的值")]),a._v(" "),t("h2",{attrs:{id:"引用类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[a._v("#")]),a._v(" 引用类型")]),a._v(" "),t("p",[a._v("Object Array 值为对象，存放在堆内存中，在栈内存中变量保存的是一个指针，指向对应在堆内存中的地址。当访问引用类型的时候，要先从栈中取出该对象的地址指针，然后再从堆内存中取得所需的数据。")]),a._v(" "),t("h1",{attrs:{id:"深拷贝和浅拷贝的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝的区别"}},[a._v("#")]),a._v(" 深拷贝和浅拷贝的区别")]),a._v(" "),t("p",[a._v("浅拷贝：将原对象或原数组的引用直接赋给新对象，新数组，新对象／数组只是原对象的一个引用")]),a._v(" "),t("p",[a._v("深拷贝：创建一个新的对象和数组，将原对象的各项属性的“值”（数组的所有元素）拷贝过来，是“值”而不是“引用”")]),a._v(" "),t("h1",{attrs:{id:"浅拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[a._v("#")]),a._v(" 浅拷贝")]),a._v(" "),t("p",[a._v("回到文章开始的问题，为什么拷贝的数据对象和期望的值不一样呢，这里就涉及到你用的‘拷贝’其实本质上是一种浅拷贝（只对第一层级做拷贝）。针对这个问题可以发现，对于对象的第一层级，我们是拷贝了对象属性的值；但是当对象的属性值是引用类型的时候，我们拷贝了对象的引用值。")]),a._v(" "),t("p",[a._v("同理：针对Array数据的concat、slice也是一种浅拷贝（只对第一层级做拷贝）")]),a._v(" "),t("p",[a._v("补充：对引用类型数据直接复制的操作同样是浅拷贝（这里就不做进一步的说明了）")]),a._v(" "),t("h2",{attrs:{id:"只对第一层级做拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#只对第一层级做拷贝"}},[a._v("#")]),a._v(" 只对第一层级做拷贝")]),a._v(" "),t("h3",{attrs:{id:"_1-直接遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-直接遍历"}},[a._v("#")]),a._v(" 1.直接遍历")]),a._v(" "),t("div",{staticClass:"language-guage-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var array = [1, 2, 3, 4];\nfunction copy (obj) {\n   let obj1 = {}\n   if (Array.isArray(obj)) {\n       obj1 = []\n   }\n   for(let key in array) {\n      obj1[key] = obj[key]\n   }\n   return  obj1;\n}\nvar copyArray = copy(array);\ncopyArray[0] = 100;\nconsole.log(array); // [1, 2, 3, 4]\nconsole.log(copyArray); // [100, 2, 3, 4]\n")])])]),t("h3",{attrs:{id:"_2-array-slice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-array-slice"}},[a._v("#")]),a._v(" 2. array.slice()")]),a._v(" "),t("div",{staticClass:"language-guage-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var array = [1, 2, 3, 4];\nvar copyArray = array.slice();\ncopyArray[0] = 100;\nconsole.log(array); // [1, 2, 3, 4]\nconsole.log(copyArray); // [100, 2, 3, 4]\n")])])]),t("p",[a._v("slice() 方法返回一个从已有的数组中截取一部分元素片段组成的新数组（不改变原来的数组！）")]),a._v(" "),t("p",[a._v("用法：array．slice(start,end)　start表示是起始元素的下标，end表示的是终止元素的下标。当slice()不带任何参数的时候，默认返回一个长度和原数组相同的新数组")]),a._v(" "),t("h3",{attrs:{id:"_3-array-concat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-array-concat"}},[a._v("#")]),a._v(" 3. array.concat()")]),a._v(" "),t("div",{staticClass:"language-guage-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var array = [1, 2, 3, 4];\nvar copyArray = array.concat();\ncopyArray[0] = 100;\nconsole.log(array); // [1, 2, 3, 4]\nconsole.log(copyArray); // [100, 2, 3, 4]\n")])])]),t("p",[a._v("concat() 方法用于连接两个或多个数组。( 该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。)")]),a._v(" "),t("p",[a._v("用法：array.concat(array1,array2,…,arrayN)")]),a._v(" "),t("p",[a._v("因为我们上面调用concat的时候没有带上参数，所以var copyArray = array.concat();实际上相当于var copyArray = array.concat([]);也即把返回数组和一个空数组合并后返回")]),a._v(" "),t("h3",{attrs:{id:"_4-object-assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-object-assign"}},[a._v("#")]),a._v(" 4. Object.assign()")]),a._v(" "),t("p",[a._v("见文章开头的示例")]),a._v(" "),t("p",[a._v("assign() 方法用来将源对象（source）的所有可枚举属性，复制到目标对象（target）。它至少需要两个对象作为参数，第一个参数是目标对象，后面的参数都是源对象。")]),a._v(" "),t("p",[a._v("用法： Object.assign(target, source1, source2);  所以 copyObj = Object.assign({}, obj);  这段代码将会把obj中的一级属性都拷贝到 ｛｝中，然后将其返回赋给copyObj")]),a._v(" "),t("h1",{attrs:{id:"深拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[a._v("#")]),a._v(" 深拷贝")]),a._v(" "),t("p",[a._v("有没有更强大一些的解决方案呢？使得我们能够")]),a._v(" "),t("ol",[t("li",[a._v("不仅拷贝第一层级，还能够拷贝数组或对象所有层级的各项值")]),a._v(" "),t("li",[a._v("不是单独针对数组或对象，而是能够通用于数组，对象和其他复杂的JSON形式的对象")])]),a._v(" "),t("h2",{attrs:{id:"json-parse-json-stringify-xxxx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json-parse-json-stringify-xxxx"}},[a._v("#")]),a._v(" JSON.parse(JSON.stringify(XXXX))")]),a._v(" "),t("div",{staticClass:"language-guage-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var array = [\n    { number: 1 },\n    { number: 2 },\n    { number: 3 }\n];\nvar copyArray = JSON.parse(JSON.stringify(array))\ncopyArray[0].number = 100;\nconsole.log(array); //  [{number: 1}, { number: 2 }, { number: 3 }]\nconsole.log(copyArray); // [{number: 100}, { number: 2 }, { number: 3 }]\n")])])]),t("p",[a._v("缺点：不能拷贝除Object、Array以外的对象类型")]),a._v(" "),t("h2",{attrs:{id:"jquery-extend"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jquery-extend"}},[a._v("#")]),a._v(" Jquery.extend()")]),a._v(" "),t("div",{staticClass:"language-guage-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var array = [\n    { number: 1 },\n    { number: 2 },\n    { number: 3 }\n];\nvar copyArray = $.extent(true, {}, array)\ncopyArray[0].number = 100;\nconsole.log(array); //  [{number: 1}, { number: 2 }, { number: 3 }]\nconsole.log(copyArray); // [{number: 100}, { number: 2 }, { number: 3 }]\n")])])]),t("h2",{attrs:{id:"自己写递归"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自己写递归"}},[a._v("#")]),a._v(" 自己写递归")]),a._v(" "),t("div",{staticClass:"language-guage-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  deepObjAssign = function(obj) {\n    if (obj == null) {\n      throw new TypeError('Cannot convert undefined or null to object')\n    } else {\n      let target = Array.isArray(obj) ? [] : {}, a = '[object Array]', o = '[object Object]'\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          let t = Object.prototype.toString.call(obj[key])\n          if (t === a || t === o) {\n            target[key] = deepObjAssign(obj[key])\n            continue\n          }\n        }\n        target[key] = obj[key]\n      }\n      return target\n    }\n  }\n")])])]),t("h1",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[a._v("#")]),a._v(" demo")]),a._v(" "),t("div",{staticClass:"language-guage-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  Object.assign = Object.assign || function(target) {\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object')\n    } else {\n      target = Object(target)\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[index]\n        if (source != null) {\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key]\n            }\n          }\n        }\n      }\n      return target\n    }\n  }\n  var deepObjAssign = function(target, source) {\n\tlet a = '[object Array]', o = '[object Object]'\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        let val = target[key]\n        if (val) {\n          let t = Object.prototype.toString.call(val)\n          if (t === a || t === o) {\n            t = Object.prototype.toString.call(source[key])\n            if (t === a || t === o) {\n              deepObjAssign(val, source[key])\n              continue\n            }\n          }\n        }\n        target[key] = source[key]\n      }\n    }\n    return target\n  }\n  // 深合并\n  Object.assignDeep = function (target) {\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object')\n    } else{\n    \ttarget = Object(target)\n    \tfor (var i = 1; i < arguments.length; i++) {\n      \t    var source = arguments[i]\n          \tif (source != null) {\n          \t\ttarget = deepObjAssign(target, source)\n          \t}\n       }\n       return target\n    }\n  }\n  // 深拷贝\n  Object.copy = function(obj) {\n    if (obj == null) {\n      throw new TypeError('Cannot convert undefined or null to object')\n    } else {\n      let target = Array.isArray(obj) ? [] : {}, a = '[object Array]', o = '[object Object]'\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          let t = Object.prototype.toString.call(obj[key])\n          if (t === a || t === o) {\n            target[key] = deepObjAssign(obj[key])\n            continue\n          }\n        }\n        target[key] = obj[key]\n      }\n      return target\n    }\n  }\n")])])]),t("p",[a._v("https://juejin.im/post/5e96acf3f265da47c8013528")]),a._v(" "),t("p",[a._v("文章来源：https://blog.csdn.net/qq_32462903/article/details/105841395?utm_medium=distribute.pc_feed.215691&depth_1-utm_source=distribute.pc_feed.215691")]),a._v(" "),t("backTop")],1)}),[],!1,null,null,null);r.default=n.exports}}]);