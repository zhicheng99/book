(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{443:function(n,e,t){"use strict";t.r(e);var a=t(10),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"你也许不知道的-javascript-高级函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#你也许不知道的-javascript-高级函数"}},[n._v("#")]),n._v(" 你也许不知道的 JavaScript 高级函数")]),n._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),t("p",[n._v("高阶函数是对其他函数进行操作的函数，可以将它们作为参数或通过返回它们。简单来说，高阶函数是一个函数，它接收函数作为参数或将函数作为输出返回。")]),n._v(" "),t("p",[n._v("例如 "),t("code",[n._v("Array.prototype.map")]),n._v("，"),t("code",[n._v("Array.prototype.filter")]),n._v("，"),t("code",[n._v("Array.prototype.reduce")]),n._v(" 都是一些高阶函数。")]),n._v(" "),t("h2",{attrs:{id:"尾调用和尾递归"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#尾调用和尾递归"}},[n._v("#")]),n._v(" 尾调用和尾递归")]),n._v(" "),t("p",[n._v("尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚。就是指某个函数的最后一步是调用另一个函数。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function g(x) {\n  console.log(x)\n}\nfunction f(x) {\n  return g(x)\n}\nconsole.log(f(1))\n//上面代码中，函数f的最后一步是调用函数g，这就是尾调用。\n复制代码\n")])])]),t("p",[n._v("上面代码中，函数 f 的最后一步是调用函数 g，这就是尾调用。尾调用不一定出现在函数尾部，只要是最后一步操作即可。")]),n._v(" "),t("p",[n._v("函数调用自身，称为递归。如果尾调用自身，就称为尾递归。递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生栈溢出错误。但是队伍尾递归来说，由于只存在一个调用帧，所以永远不会发生栈溢出错误。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function factorial(n) {\n  if (n === 1) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n复制代码\n")])])]),t("p",[n._v("上面代码是一个阶乘函数，计算 n 的阶乘，最多需要保存 n 个调用数据，复杂度为 O（n），如果改写成尾调用，只保留一个调用记录，复杂度为 O（1）。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function factor(n, total) {\n  if (n === 1) {\n    return total\n  }\n  return factor(n - 1, n * total)\n}\n复制代码\n")])])]),t("p",[n._v("斐波拉切数列也是可以用于尾调用。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Fibonacci(n) {\n  if (n <= 1) {\n    return 1\n  }\n  return Fibonacci(n - 1) + Fibonacci(n - 2)\n}\n//尾递归\nfunction Fibona(n, ac1 = 1, ac2 = 1) {\n  if (n <= 1) {\n    return ac2\n  }\n  return Fibona(n - 1, ac2, ac1 + ac2)\n}\n复制代码\n")])])]),t("h2",{attrs:{id:"柯理化函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#柯理化函数"}},[n._v("#")]),n._v(" 柯理化函数")]),n._v(" "),t("p",[n._v("在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。"),t("strong",[n._v("所谓柯里化就是把具有较多参数的函数转换成具有较少参数的函数的过程。")]),n._v("\n举个例子")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//普通函数\nfunction fn(a, b, c, d, e) {\n  console.log(a, b, c, d, e)\n}\n//生成的柯里化函数\nlet _fn = curry(fn)\n\n_fn(1, 2, 3, 4, 5) // print: 1,2,3,4,5\n_fn(1)(2)(3, 4, 5) // print: 1,2,3,4,5\n_fn(1, 2)(3, 4)(5) // print: 1,2,3,4,5\n_fn(1)(2)(3)(4)(5) // print: 1,2,3,4,5\n复制代码\n")])])]),t("p",[n._v("柯理化函数的实现")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 对求和函数做curry化\nlet f1 = curry(add, 1, 2, 3)\nconsole.log('复杂版', f1()) // 6\n\n// 对求和函数做curry化\nlet f2 = curry(add, 1, 2)\nconsole.log('复杂版', f2(3)) // 6\n\n// 对求和函数做curry化\nlet f3 = curry(add)\nconsole.log('复杂版', f3(1, 2, 3)) // 6\n\n// 复杂版curry函数可以多次调用，如下：\nconsole.log('复杂版', f3(1)(2)(3)) // 6\nconsole.log('复杂版', f3(1, 2)(3)) // 6\nconsole.log('复杂版', f3(1)(2, 3)) // 6\n\n// 复杂版(每次可传入不定数量的参数，当所传参数总数不少于函数的形参总数时，才会执行)\nfunction curry(fn) {\n  // 闭包\n  // 缓存除函数fn之外的所有参数\n  let args = Array.prototype.slice.call(arguments, 1)\n  return function() {\n    // 连接已缓存的老的参数和新传入的参数(即把每次传入的参数全部先保存下来，但是并不执行)\n    let newArgs = args.concat(Array.from(arguments))\n    if (newArgs.length < fn.length) {\n      // 累积的参数总数少于fn形参总数\n      // 递归传入fn和已累积的参数\n      return curry.call(this, fn, ...newArgs)\n    } else {\n      // 调用\n      return fn.apply(this, newArgs)\n    }\n  }\n}\n复制代码\n")])])]),t("h3",{attrs:{id:"柯里化的用途"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#柯里化的用途"}},[n._v("#")]),n._v(" 柯里化的用途")]),n._v(" "),t("p",[n._v("柯里化实际是把简答的问题复杂化了，但是复杂化的同时，我们在使用函数时拥有了更加多的自由度。 而这里对于函数参数的自由处理，正是柯里化的核心所在。 柯里化本质上是降低通用性，提高适用性。来看一个例子：")]),n._v(" "),t("p",[n._v("我们工作中会遇到各种需要通过正则检验的需求，比如校验电话号码、校验邮箱、校验身份证号、校验密码等， 这时我们会封装一个通用函数 checkByRegExp ,接收两个参数，校验的正则对象和待校验的字符串")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function checkByRegExp(regExp, string) {\n  return regExp.text(string)\n}\n\ncheckByRegExp(/^1d{10}$/, '18642838455') // 校验电话号码\ncheckByRegExp(/^(w)+(.w+)*@(w)+((.w+)+)$/, 'test@163.com') // 校验邮箱\n复制代码\n")])])]),t("p",[n._v("我们每次进行校验的时候都需要输入一串正则，再校验同一类型的数据时，相同的正则我们需要写多次， 这就导致我们在使用的时候效率低下，并且由于 checkByRegExp 函数本身是一个工具函数并没有任何意义。此时，我们可以借助柯里化对 checkByRegExp 函数进行封装，以简化代码书写，提高代码可读性。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//进行柯里化\nlet _check = curry(checkByRegExp)\n//生成工具函数，验证电话号码\nlet checkCellPhone = _check(/^1d{10}$/)\n//生成工具函数，验证邮箱\nlet checkEmail = _check(/^(w)+(.w+)*@(w)+((.w+)+)$/)\n\ncheckCellPhone('18642838455') // 校验电话号码\ncheckCellPhone('13109840560') // 校验电话号码\ncheckCellPhone('13204061212') // 校验电话号码\n\ncheckEmail('test@163.com') // 校验邮箱\ncheckEmail('test@qq.com') // 校验邮箱\ncheckEmail('test@gmail.com') // 校验邮箱\n复制代码\n")])])]),t("h3",{attrs:{id:"柯里化函数参数-length"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#柯里化函数参数-length"}},[n._v("#")]),n._v(" 柯里化函数参数 length")]),n._v(" "),t("p",[n._v("函数 currying 的实现中，使用了 fn.length 来表示函数参数的个数，那 fn.length 表示函数的所有参数个数吗？并不是。")]),n._v(" "),t("p",[n._v("函数的 length 属性获取的是形参的个数，但是形参的数量不包括剩余参数个数，而且仅包括第一个具有默认值之前的参数个数，看下面的例子。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("((a, b, c) => {}).length\n// 3\n\n((a, b, c = 3) => {}).length\n// 2\n\n((a, b = 2, c) => {}).length\n// 1\n\n((a = 1, b, c) => {}).length\n// 0\n\n((...args) => {}).length\n// 0\n\nconst fn = (...args) => {\n  console.log(args.length)\n}\nfn(1, 2, 3)\n// 3\n复制代码\n")])])]),t("h2",{attrs:{id:"compose-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compose-函数"}},[n._v("#")]),n._v(" compose 函数")]),n._v(" "),t("p",[n._v("compose 就是组合函数，将子函数串联起来执行，一个函数的输出结果是另一个函数的输入参数，一旦第一个函数开始执行，会像多米诺骨牌一样推导执行后续函数。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const greeting = name => `Hello ${name}`\nconst toUpper = str => str.toUpperCase()\n\ntoUpper(greeting('Onion')) // HELLO ONION\n复制代码\n")])])]),t("p",[n._v("compose 函数的特点")]),n._v(" "),t("ul",[t("li",[n._v("compose 接受函数作为参数，从右向左执行，返回类型函数")]),n._v(" "),t("li",[n._v("fn()全部参数传给最右边的函数，得到结果后传给倒数第二个，依次传递")])]),n._v(" "),t("p",[n._v("compose 的实现")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var compose = function(...args) {\n  var len = args.length // args函数的个数\n  var count = len - 1\n  var result\n  return function func(...args1) {\n    // func函数的args1参数枚举\n    result = args[count].call(this, args1)\n    if (count > 0) {\n      count--\n      return func.call(null, result) // result 上一个函数的返回结果\n    } else {\n      //回复count初始状态\n      count = len - 1\n      return result\n    }\n  }\n}\n复制代码\n")])])]),t("p",[n._v("举个例子")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var greeting = (name) =>  `Hello ${name}`\nvar toUpper = str => str.toUpperCase()\nvar fn = compose(toUpper, greeting)\nconsole.log(fn('jack'))\n复制代码\n")])])]),t("p",[n._v("大家熟悉的 webpack 里面的 loader 执行顺序是从右到左，是因为 webpack 选择的是 compose 方式，从右到左依次执行 loader，每个 loader 是一个函数。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("rules: [\n  { test: /.css$/, use: ['style-loader', 'css-loader'] }\n]\n复制代码\n")])])]),t("p",[n._v("如上，webpack 使用了 style-loader 和 css-loader，它是先用 css-loader 加载.css 文件，然后 style-loader 将内部样式注入到我们的 HTML 页面。")]),n._v(" "),t("p",[n._v("webpack 里面的 compose 代码如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const compose = (...fns) => {\n  return fns.reduce(\n    (prevFn, nextFn) => {\n      return value =>prevFn(nextFn(value)) \n    },\n    value => value\n  )\n}\n复制代码\n")])])]),t("p",[n._v("文章来源：https://juejin.im/post/5e96c3eee51d4546f5790df1")]),n._v(" "),t("backTop")],1)}),[],!1,null,null,null);e.default=r.exports}}]);